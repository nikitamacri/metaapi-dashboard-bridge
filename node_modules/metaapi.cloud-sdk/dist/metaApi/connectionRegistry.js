'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _metaApiConnection = require('./metaApiConnection');

var _metaApiConnection2 = _interopRequireDefault(_metaApiConnection);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Manages account connections
 */
class ConnectionRegistry {

  /**
   * Constructs a MetaTrader connection registry instance
   * @param {MetaApiWebsocketClient} metaApiWebsocketClient MetaApi websocket client
   * @param {String} application application id
   * @param {String} refreshSubscriptionsOpts subscriptions refresh options
   */
  constructor(metaApiWebsocketClient, application = 'MetaApi', refreshSubscriptionsOpts) {
    refreshSubscriptionsOpts = refreshSubscriptionsOpts || {};
    this._metaApiWebsocketClient = metaApiWebsocketClient;
    this._application = application;
    this._refreshSubscriptionsOpts = refreshSubscriptionsOpts;
    this._connections = {};
    this._connectionLocks = {};
  }

  /**
   * Creates and returns a new account connection if doesnt exist, otherwise returns old
   * @param {MetatraderAccount} account MetaTrader account id to connect to
   * @param {HistoryStorage} historyStorage terminal history storage
   * @param {Date} [historyStartTime] history start time
   */
  async connect(account, historyStorage, historyStartTime) {
    if (this._connections[account.id]) {
      return this._connections[account.id];
    } else {
      while (this._connectionLocks[account.id]) {
        await this._connectionLocks[account.id].promise;
      }
      if (this._connections[account.id]) {
        return this._connections[account.id];
      }
      let connectionLockResolve;
      this._connectionLocks[account.id] = { promise: new _promise2.default(res => connectionLockResolve = res) };
      const connection = new _metaApiConnection2.default(this._metaApiWebsocketClient, account, historyStorage, this, historyStartTime, this._refreshSubscriptionsOpts);
      try {
        await connection.initialize();
        await connection.subscribe();
        this._connections[account.id] = connection;
      } finally {
        delete this._connectionLocks[account.id];
        connectionLockResolve();
      }
      return connection;
    }
  }

  /**
   * Removes an account from registry
   * @param {string} accountId MetaTrader account id to remove
   */
  remove(accountId) {
    if (this._connections[accountId]) {
      delete this._connections[accountId];
    }
  }

  /**
   * Returns application type
   * @return {String} application type
   */
  get application() {
    return this._application;
  }
}
exports.default = ConnectionRegistry;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2xpYi9tZXRhQXBpL2Nvbm5lY3Rpb25SZWdpc3RyeS5lczYiXSwibmFtZXMiOlsiQ29ubmVjdGlvblJlZ2lzdHJ5IiwiY29uc3RydWN0b3IiLCJtZXRhQXBpV2Vic29ja2V0Q2xpZW50IiwiYXBwbGljYXRpb24iLCJyZWZyZXNoU3Vic2NyaXB0aW9uc09wdHMiLCJfbWV0YUFwaVdlYnNvY2tldENsaWVudCIsIl9hcHBsaWNhdGlvbiIsIl9yZWZyZXNoU3Vic2NyaXB0aW9uc09wdHMiLCJfY29ubmVjdGlvbnMiLCJfY29ubmVjdGlvbkxvY2tzIiwiY29ubmVjdCIsImFjY291bnQiLCJoaXN0b3J5U3RvcmFnZSIsImhpc3RvcnlTdGFydFRpbWUiLCJpZCIsInByb21pc2UiLCJjb25uZWN0aW9uTG9ja1Jlc29sdmUiLCJyZXMiLCJjb25uZWN0aW9uIiwiTWV0YUFwaUNvbm5lY3Rpb24iLCJpbml0aWFsaXplIiwic3Vic2NyaWJlIiwicmVtb3ZlIiwiYWNjb3VudElkIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUE7Ozs7OztBQUVBOzs7QUFHZSxNQUFNQSxrQkFBTixDQUF5Qjs7QUFFdEM7Ozs7OztBQU1BQyxjQUFZQyxzQkFBWixFQUFvQ0MsY0FBYyxTQUFsRCxFQUE2REMsd0JBQTdELEVBQXVGO0FBQ3JGQSwrQkFBMkJBLDRCQUE0QixFQUF2RDtBQUNBLFNBQUtDLHVCQUFMLEdBQStCSCxzQkFBL0I7QUFDQSxTQUFLSSxZQUFMLEdBQW9CSCxXQUFwQjtBQUNBLFNBQUtJLHlCQUFMLEdBQWlDSCx3QkFBakM7QUFDQSxTQUFLSSxZQUFMLEdBQW9CLEVBQXBCO0FBQ0EsU0FBS0MsZ0JBQUwsR0FBd0IsRUFBeEI7QUFDRDs7QUFFRDs7Ozs7O0FBTUEsUUFBTUMsT0FBTixDQUFjQyxPQUFkLEVBQXVCQyxjQUF2QixFQUF1Q0MsZ0JBQXZDLEVBQXlEO0FBQ3ZELFFBQUksS0FBS0wsWUFBTCxDQUFrQkcsUUFBUUcsRUFBMUIsQ0FBSixFQUFtQztBQUNqQyxhQUFPLEtBQUtOLFlBQUwsQ0FBa0JHLFFBQVFHLEVBQTFCLENBQVA7QUFDRCxLQUZELE1BRU87QUFDTCxhQUFPLEtBQUtMLGdCQUFMLENBQXNCRSxRQUFRRyxFQUE5QixDQUFQLEVBQTBDO0FBQ3hDLGNBQU0sS0FBS0wsZ0JBQUwsQ0FBc0JFLFFBQVFHLEVBQTlCLEVBQWtDQyxPQUF4QztBQUNEO0FBQ0QsVUFBSSxLQUFLUCxZQUFMLENBQWtCRyxRQUFRRyxFQUExQixDQUFKLEVBQW1DO0FBQ2pDLGVBQU8sS0FBS04sWUFBTCxDQUFrQkcsUUFBUUcsRUFBMUIsQ0FBUDtBQUNEO0FBQ0QsVUFBSUUscUJBQUo7QUFDQSxXQUFLUCxnQkFBTCxDQUFzQkUsUUFBUUcsRUFBOUIsSUFBb0MsRUFBQ0MsU0FBUyxzQkFBWUUsT0FBT0Qsd0JBQXdCQyxHQUEzQyxDQUFWLEVBQXBDO0FBQ0EsWUFBTUMsYUFBYSxJQUFJQywyQkFBSixDQUFzQixLQUFLZCx1QkFBM0IsRUFBb0RNLE9BQXBELEVBQTZEQyxjQUE3RCxFQUE2RSxJQUE3RSxFQUNqQkMsZ0JBRGlCLEVBQ0MsS0FBS04seUJBRE4sQ0FBbkI7QUFFQSxVQUFJO0FBQ0YsY0FBTVcsV0FBV0UsVUFBWCxFQUFOO0FBQ0EsY0FBTUYsV0FBV0csU0FBWCxFQUFOO0FBQ0EsYUFBS2IsWUFBTCxDQUFrQkcsUUFBUUcsRUFBMUIsSUFBZ0NJLFVBQWhDO0FBQ0QsT0FKRCxTQUlVO0FBQ1IsZUFBTyxLQUFLVCxnQkFBTCxDQUFzQkUsUUFBUUcsRUFBOUIsQ0FBUDtBQUNBRTtBQUNEO0FBQ0QsYUFBT0UsVUFBUDtBQUNEO0FBQ0Y7O0FBRUQ7Ozs7QUFJQUksU0FBT0MsU0FBUCxFQUFrQjtBQUNoQixRQUFJLEtBQUtmLFlBQUwsQ0FBa0JlLFNBQWxCLENBQUosRUFBa0M7QUFDaEMsYUFBTyxLQUFLZixZQUFMLENBQWtCZSxTQUFsQixDQUFQO0FBQ0Q7QUFDRjs7QUFFRDs7OztBQUlBLE1BQUlwQixXQUFKLEdBQWtCO0FBQ2hCLFdBQU8sS0FBS0csWUFBWjtBQUNEO0FBakVxQztrQkFBbkJOLGtCIiwiZmlsZSI6ImNvbm5lY3Rpb25SZWdpc3RyeS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBNZXRhQXBpQ29ubmVjdGlvbiBmcm9tICcuL21ldGFBcGlDb25uZWN0aW9uJztcblxuLyoqXG4gKiBNYW5hZ2VzIGFjY291bnQgY29ubmVjdGlvbnNcbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ29ubmVjdGlvblJlZ2lzdHJ5IHtcblxuICAvKipcbiAgICogQ29uc3RydWN0cyBhIE1ldGFUcmFkZXIgY29ubmVjdGlvbiByZWdpc3RyeSBpbnN0YW5jZVxuICAgKiBAcGFyYW0ge01ldGFBcGlXZWJzb2NrZXRDbGllbnR9IG1ldGFBcGlXZWJzb2NrZXRDbGllbnQgTWV0YUFwaSB3ZWJzb2NrZXQgY2xpZW50XG4gICAqIEBwYXJhbSB7U3RyaW5nfSBhcHBsaWNhdGlvbiBhcHBsaWNhdGlvbiBpZFxuICAgKiBAcGFyYW0ge1N0cmluZ30gcmVmcmVzaFN1YnNjcmlwdGlvbnNPcHRzIHN1YnNjcmlwdGlvbnMgcmVmcmVzaCBvcHRpb25zXG4gICAqL1xuICBjb25zdHJ1Y3RvcihtZXRhQXBpV2Vic29ja2V0Q2xpZW50LCBhcHBsaWNhdGlvbiA9ICdNZXRhQXBpJywgcmVmcmVzaFN1YnNjcmlwdGlvbnNPcHRzKSB7XG4gICAgcmVmcmVzaFN1YnNjcmlwdGlvbnNPcHRzID0gcmVmcmVzaFN1YnNjcmlwdGlvbnNPcHRzIHx8IHt9O1xuICAgIHRoaXMuX21ldGFBcGlXZWJzb2NrZXRDbGllbnQgPSBtZXRhQXBpV2Vic29ja2V0Q2xpZW50O1xuICAgIHRoaXMuX2FwcGxpY2F0aW9uID0gYXBwbGljYXRpb247XG4gICAgdGhpcy5fcmVmcmVzaFN1YnNjcmlwdGlvbnNPcHRzID0gcmVmcmVzaFN1YnNjcmlwdGlvbnNPcHRzO1xuICAgIHRoaXMuX2Nvbm5lY3Rpb25zID0ge307XG4gICAgdGhpcy5fY29ubmVjdGlvbkxvY2tzID0ge307XG4gIH1cbiAgXG4gIC8qKlxuICAgKiBDcmVhdGVzIGFuZCByZXR1cm5zIGEgbmV3IGFjY291bnQgY29ubmVjdGlvbiBpZiBkb2VzbnQgZXhpc3QsIG90aGVyd2lzZSByZXR1cm5zIG9sZFxuICAgKiBAcGFyYW0ge01ldGF0cmFkZXJBY2NvdW50fSBhY2NvdW50IE1ldGFUcmFkZXIgYWNjb3VudCBpZCB0byBjb25uZWN0IHRvXG4gICAqIEBwYXJhbSB7SGlzdG9yeVN0b3JhZ2V9IGhpc3RvcnlTdG9yYWdlIHRlcm1pbmFsIGhpc3Rvcnkgc3RvcmFnZVxuICAgKiBAcGFyYW0ge0RhdGV9IFtoaXN0b3J5U3RhcnRUaW1lXSBoaXN0b3J5IHN0YXJ0IHRpbWVcbiAgICovXG4gIGFzeW5jIGNvbm5lY3QoYWNjb3VudCwgaGlzdG9yeVN0b3JhZ2UsIGhpc3RvcnlTdGFydFRpbWUpIHtcbiAgICBpZiAodGhpcy5fY29ubmVjdGlvbnNbYWNjb3VudC5pZF0pIHtcbiAgICAgIHJldHVybiB0aGlzLl9jb25uZWN0aW9uc1thY2NvdW50LmlkXTtcbiAgICB9IGVsc2Uge1xuICAgICAgd2hpbGUgKHRoaXMuX2Nvbm5lY3Rpb25Mb2Nrc1thY2NvdW50LmlkXSkge1xuICAgICAgICBhd2FpdCB0aGlzLl9jb25uZWN0aW9uTG9ja3NbYWNjb3VudC5pZF0ucHJvbWlzZTtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLl9jb25uZWN0aW9uc1thY2NvdW50LmlkXSkge1xuICAgICAgICByZXR1cm4gdGhpcy5fY29ubmVjdGlvbnNbYWNjb3VudC5pZF07XG4gICAgICB9XG4gICAgICBsZXQgY29ubmVjdGlvbkxvY2tSZXNvbHZlO1xuICAgICAgdGhpcy5fY29ubmVjdGlvbkxvY2tzW2FjY291bnQuaWRdID0ge3Byb21pc2U6IG5ldyBQcm9taXNlKHJlcyA9PiBjb25uZWN0aW9uTG9ja1Jlc29sdmUgPSByZXMpfTtcbiAgICAgIGNvbnN0IGNvbm5lY3Rpb24gPSBuZXcgTWV0YUFwaUNvbm5lY3Rpb24odGhpcy5fbWV0YUFwaVdlYnNvY2tldENsaWVudCwgYWNjb3VudCwgaGlzdG9yeVN0b3JhZ2UsIHRoaXMsXG4gICAgICAgIGhpc3RvcnlTdGFydFRpbWUsIHRoaXMuX3JlZnJlc2hTdWJzY3JpcHRpb25zT3B0cyk7XG4gICAgICB0cnkge1xuICAgICAgICBhd2FpdCBjb25uZWN0aW9uLmluaXRpYWxpemUoKTtcbiAgICAgICAgYXdhaXQgY29ubmVjdGlvbi5zdWJzY3JpYmUoKTtcbiAgICAgICAgdGhpcy5fY29ubmVjdGlvbnNbYWNjb3VudC5pZF0gPSBjb25uZWN0aW9uO1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgZGVsZXRlIHRoaXMuX2Nvbm5lY3Rpb25Mb2Nrc1thY2NvdW50LmlkXTtcbiAgICAgICAgY29ubmVjdGlvbkxvY2tSZXNvbHZlKCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gY29ubmVjdGlvbjtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlcyBhbiBhY2NvdW50IGZyb20gcmVnaXN0cnlcbiAgICogQHBhcmFtIHtzdHJpbmd9IGFjY291bnRJZCBNZXRhVHJhZGVyIGFjY291bnQgaWQgdG8gcmVtb3ZlXG4gICAqL1xuICByZW1vdmUoYWNjb3VudElkKSB7XG4gICAgaWYgKHRoaXMuX2Nvbm5lY3Rpb25zW2FjY291bnRJZF0pIHtcbiAgICAgIGRlbGV0ZSB0aGlzLl9jb25uZWN0aW9uc1thY2NvdW50SWRdO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGFwcGxpY2F0aW9uIHR5cGVcbiAgICogQHJldHVybiB7U3RyaW5nfSBhcHBsaWNhdGlvbiB0eXBlXG4gICAqL1xuICBnZXQgYXBwbGljYXRpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuX2FwcGxpY2F0aW9uO1xuICB9XG59XG4iXX0=