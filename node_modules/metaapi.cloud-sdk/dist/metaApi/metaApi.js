'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _httpClient = require('../clients/httpClient');

var _httpClient2 = _interopRequireDefault(_httpClient);

var _provisioningProfile = require('../clients/metaApi/provisioningProfile.client');

var _provisioningProfile2 = _interopRequireDefault(_provisioningProfile);

var _provisioningProfileApi = require('./provisioningProfileApi');

var _provisioningProfileApi2 = _interopRequireDefault(_provisioningProfileApi);

var _metaApiWebsocket = require('../clients/metaApi/metaApiWebsocket.client');

var _metaApiWebsocket2 = _interopRequireDefault(_metaApiWebsocket);

var _metatraderAccountApi = require('./metatraderAccountApi');

var _metatraderAccountApi2 = _interopRequireDefault(_metatraderAccountApi);

var _metatraderAccount = require('../clients/metaApi/metatraderAccount.client');

var _metatraderAccount2 = _interopRequireDefault(_metatraderAccount);

var _metatraderDemoAccountApi = require('./metatraderDemoAccountApi');

var _metatraderDemoAccountApi2 = _interopRequireDefault(_metatraderDemoAccountApi);

var _metatraderDemoAccount = require('../clients/metaApi/metatraderDemoAccount.client');

var _metatraderDemoAccount2 = _interopRequireDefault(_metatraderDemoAccount);

var _historicalMarketData = require('../clients/metaApi/historicalMarketData.client');

var _historicalMarketData2 = _interopRequireDefault(_historicalMarketData);

var _connectionRegistry = require('./connectionRegistry');

var _connectionRegistry2 = _interopRequireDefault(_connectionRegistry);

var _errorHandler = require('../clients/errorHandler');

var _optionsValidator = require('../clients/optionsValidator');

var _optionsValidator2 = _interopRequireDefault(_optionsValidator);

var _latencyMonitor = require('./latencyMonitor');

var _latencyMonitor2 = _interopRequireDefault(_latencyMonitor);

var _expertAdvisor = require('../clients/metaApi/expertAdvisor.client');

var _expertAdvisor2 = _interopRequireDefault(_expertAdvisor);

var _logger = require('../logger');

var _logger2 = _interopRequireDefault(_logger);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Request retry options
 * @typedef {Object} RetryOpts
 * @property {Number} [retries] maximum amount of request retries, default value is 5
 * @property {Number} [minDelayInSeconds] minimum delay in seconds until request retry, default value is 1
 * @property {Number} [maxDelayInSeconds] maximum delay in seconds until request retry, default value is 30
 */

/**
 * Options for processing websocket client events
 * @typedef {Object} EventProcessingOpts
 * @property {Boolean} [sequentialProcessing] an option to process synchronization events after finishing
 * previous ones, default value is true
 */

/**
 * Subscriptions refresh options
 * @typedef {Object} RefreshSubscriptionsOpts
 * @property {Number} [minDelayInSeconds] minimum delay in seconds until subscriptions refresh request,
 * default value is 1
 * @property {Number} [maxDelayInSeconds] maximum delay in seconds until subscriptions refresh request,
 * default value is 600
 */

/**
 * MetaApi options
 * @typedef {Object} MetaApiOpts
 * @property {String} [application] application id
 * @property {String} [domain] domain to connect to, default is agiliumtrade.agiliumtrade.ai
 * @property {Number} [requestTimeout] timeout for socket requests in seconds
 * @property {Number} [connectTimeout] timeout for connecting to server in seconds
 * @property {Number} [packetOrderingTimeout] packet ordering timeout in seconds
 * @property {PacketLoggerOpts} [packetLogger] packet logger options
 * @property {Boolean} [enableLatencyMonitor] an option to enable latency tracking
 * @property {Boolean} [enableLatencyTracking] an option to enable latency tracking
 * @property {SynchronizationThrottlerOpts} [synchronizationThrottler] options for synchronization throttler
 * @property {RetryOpts} [retryOpts] options for request retries
 * @property {EventProcessingOpts} [eventProcessing] options for request retries
 * @property {Boolean} [useSharedClientApi] option to use a shared server
 * @property {RefreshSubscriptionsOpts} [refreshSubscriptionsOpts] subscriptions refresh options
 */

/**
 * MetaApi MetaTrader API SDK
 */
class MetaApi {

  /**
   * Enables using Log4js logger with extended log levels for debugging instead of
   * console.* functions. Note that log4js configuration performed by the user.
   */
  static enableLog4jsLogging() {
    _logger2.default.useLog4js();
  }

  /**
   * Constructs MetaApi class instance
   * @param {String} token authorization token
   * @param {MetaApiOpts} opts application options
   */
  // eslint-disable-next-line complexity
  constructor(token, opts) {
    const validator = new _optionsValidator2.default();
    opts = opts || {};
    const application = opts.application || 'MetaApi';
    const domain = opts.domain || 'agiliumtrade.agiliumtrade.ai';
    const requestTimeout = validator.validateNonZero(opts.requestTimeout, 60, 'requestTimeout');
    const historicalMarketDataRequestTimeout = validator.validateNonZero(opts.historicalMarketDataRequestTimeout, 240, 'historicalMarketDataRequestTimeout');
    const connectTimeout = validator.validateNonZero(opts.connectTimeout, 60, 'connectTimeout');
    const packetOrderingTimeout = validator.validateNonZero(opts.packetOrderingTimeout, 60, 'packetOrderingTimeout');
    const retryOpts = opts.retryOpts || {};
    const packetLogger = opts.packetLogger || {};
    const synchronizationThrottler = opts.synchronizationThrottler || {};
    const demoAccountRequestTimeout = validator.validateNonZero(opts.demoAccountRequestTimeout, 240, 'demoAccountRequestTimeout');
    if (!application.match(/[a-zA-Z0-9_]+/)) {
      throw new _errorHandler.ValidationError('Application name must be non-empty string consisting from letters, digits and _ only');
    }
    const eventProcessing = opts.eventProcessing;
    const useSharedClientApi = opts.useSharedClientApi || false;
    const refreshSubscriptionsOpts = opts.refreshSubscriptionsOpts || {};
    let httpClient = new _httpClient2.default(requestTimeout, retryOpts);
    let historicalMarketDataHttpClient = new _httpClient2.default(historicalMarketDataRequestTimeout, retryOpts);
    let demoAccountHttpClient = new _httpClient2.default(demoAccountRequestTimeout, retryOpts);
    this._metaApiWebsocketClient = new _metaApiWebsocket2.default(httpClient, token, { application, domain, requestTimeout,
      connectTimeout, packetLogger, packetOrderingTimeout, synchronizationThrottler, retryOpts,
      eventProcessing, useSharedClientApi });
    this._provisioningProfileApi = new _provisioningProfileApi2.default(new _provisioningProfile2.default(httpClient, token, domain));
    this._connectionRegistry = new _connectionRegistry2.default(this._metaApiWebsocketClient, application, refreshSubscriptionsOpts);
    let historicalMarketDataClient = new _historicalMarketData2.default(historicalMarketDataHttpClient, token, domain);
    this._metatraderAccountApi = new _metatraderAccountApi2.default(new _metatraderAccount2.default(httpClient, token, domain), this._metaApiWebsocketClient, this._connectionRegistry, new _expertAdvisor2.default(httpClient, token, domain), historicalMarketDataClient);
    this._metatraderDemoAccountApi = new _metatraderDemoAccountApi2.default(new _metatraderDemoAccount2.default(demoAccountHttpClient, token, domain));
    if (opts.enableLatencyTracking || opts.enableLatencyMonitor) {
      this._latencyMonitor = new _latencyMonitor2.default();
      this._metaApiWebsocketClient.addLatencyListener(this._latencyMonitor);
    }
  }

  /**
   * Returns provisioning profile API
   * @returns {ProvisioningProfileApi} provisioning profile API
   */
  get provisioningProfileApi() {
    return this._provisioningProfileApi;
  }

  /**
   * Returns MetaTrader account API
   * @return {MetatraderAccountApi} MetaTrader account API
   */
  get metatraderAccountApi() {
    return this._metatraderAccountApi;
  }

  /**
   * Returns MetaTrader demo account API
   * @return {MetatraderDemoAccountApi} MetaTrader demo account API
   */
  get metatraderDemoAccountApi() {
    return this._metatraderDemoAccountApi;
  }

  /**
   * Returns MetaApi application latency monitor
   * @return {LatencyMonitor} latency monitor
   */
  get latencyMonitor() {
    return this._latencyMonitor;
  }

  /**
   * Closes all clients and connections
   */
  close() {
    this._metaApiWebsocketClient.removeLatencyListener(this._latencyMonitor);
    this._metaApiWebsocketClient.close();
  }

}
exports.default = MetaApi;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2xpYi9tZXRhQXBpL21ldGFBcGkuZXM2Il0sIm5hbWVzIjpbIk1ldGFBcGkiLCJlbmFibGVMb2c0anNMb2dnaW5nIiwiTG9nZ2VyTWFuYWdlciIsInVzZUxvZzRqcyIsImNvbnN0cnVjdG9yIiwidG9rZW4iLCJvcHRzIiwidmFsaWRhdG9yIiwiT3B0aW9uc1ZhbGlkYXRvciIsImFwcGxpY2F0aW9uIiwiZG9tYWluIiwicmVxdWVzdFRpbWVvdXQiLCJ2YWxpZGF0ZU5vblplcm8iLCJoaXN0b3JpY2FsTWFya2V0RGF0YVJlcXVlc3RUaW1lb3V0IiwiY29ubmVjdFRpbWVvdXQiLCJwYWNrZXRPcmRlcmluZ1RpbWVvdXQiLCJyZXRyeU9wdHMiLCJwYWNrZXRMb2dnZXIiLCJzeW5jaHJvbml6YXRpb25UaHJvdHRsZXIiLCJkZW1vQWNjb3VudFJlcXVlc3RUaW1lb3V0IiwibWF0Y2giLCJWYWxpZGF0aW9uRXJyb3IiLCJldmVudFByb2Nlc3NpbmciLCJ1c2VTaGFyZWRDbGllbnRBcGkiLCJyZWZyZXNoU3Vic2NyaXB0aW9uc09wdHMiLCJodHRwQ2xpZW50IiwiSHR0cENsaWVudCIsImhpc3RvcmljYWxNYXJrZXREYXRhSHR0cENsaWVudCIsImRlbW9BY2NvdW50SHR0cENsaWVudCIsIl9tZXRhQXBpV2Vic29ja2V0Q2xpZW50IiwiTWV0YUFwaVdlYnNvY2tldENsaWVudCIsIl9wcm92aXNpb25pbmdQcm9maWxlQXBpIiwiUHJvdmlzaW9uaW5nUHJvZmlsZUFwaSIsIlByb3Zpc2lvbmluZ1Byb2ZpbGVDbGllbnQiLCJfY29ubmVjdGlvblJlZ2lzdHJ5IiwiQ29ubmVjdGlvblJlZ2lzdHJ5IiwiaGlzdG9yaWNhbE1hcmtldERhdGFDbGllbnQiLCJIaXN0b3JpY2FsTWFya2V0RGF0YUNsaWVudCIsIl9tZXRhdHJhZGVyQWNjb3VudEFwaSIsIk1ldGF0cmFkZXJBY2NvdW50QXBpIiwiTWV0YXRyYWRlckFjY291bnRDbGllbnQiLCJFeHBlcnRBZHZpc29yQ2xpZW50IiwiX21ldGF0cmFkZXJEZW1vQWNjb3VudEFwaSIsIk1ldGF0cmFkZXJEZW1vQWNjb3VudEFwaSIsIk1ldGF0cmFkZXJEZW1vQWNjb3VudENsaWVudCIsImVuYWJsZUxhdGVuY3lUcmFja2luZyIsImVuYWJsZUxhdGVuY3lNb25pdG9yIiwiX2xhdGVuY3lNb25pdG9yIiwiTGF0ZW5jeU1vbml0b3IiLCJhZGRMYXRlbmN5TGlzdGVuZXIiLCJwcm92aXNpb25pbmdQcm9maWxlQXBpIiwibWV0YXRyYWRlckFjY291bnRBcGkiLCJtZXRhdHJhZGVyRGVtb0FjY291bnRBcGkiLCJsYXRlbmN5TW9uaXRvciIsImNsb3NlIiwicmVtb3ZlTGF0ZW5jeUxpc3RlbmVyIl0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7O0FBRUE7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7Ozs7O0FBRUE7Ozs7Ozs7O0FBUUE7Ozs7Ozs7QUFPQTs7Ozs7Ozs7O0FBU0E7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWtCQTs7O0FBR2UsTUFBTUEsT0FBTixDQUFjOztBQUUzQjs7OztBQUlBLFNBQU9DLG1CQUFQLEdBQTZCO0FBQzNCQyxxQkFBY0MsU0FBZDtBQUNEOztBQUVEOzs7OztBQUtBO0FBQ0FDLGNBQVlDLEtBQVosRUFBbUJDLElBQW5CLEVBQXlCO0FBQ3ZCLFVBQU1DLFlBQVksSUFBSUMsMEJBQUosRUFBbEI7QUFDQUYsV0FBT0EsUUFBUSxFQUFmO0FBQ0EsVUFBTUcsY0FBY0gsS0FBS0csV0FBTCxJQUFvQixTQUF4QztBQUNBLFVBQU1DLFNBQVNKLEtBQUtJLE1BQUwsSUFBZSw4QkFBOUI7QUFDQSxVQUFNQyxpQkFBaUJKLFVBQVVLLGVBQVYsQ0FBMEJOLEtBQUtLLGNBQS9CLEVBQStDLEVBQS9DLEVBQW1ELGdCQUFuRCxDQUF2QjtBQUNBLFVBQU1FLHFDQUFxQ04sVUFBVUssZUFB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QUosR0FBNkI7QUFDM0IsV0FBTyxLQUFLbkIsdUJBQVo7QUFDRDs7QUFFRDs7OztBQUlBLE1BQUlvQixvQkFBSixHQUEyQjtBQUN6QixXQUFPLEtBQUtiLHFCQUFaO0FBQ0Q7O0FBRUQ7Ozs7QUFJQSxNQUFJYyx3QkFBSixHQUErQjtBQUM3QixXQUFPLEtBQUtWLHlCQUFaO0FBQ0Q7O0FBRUQ7Ozs7QUFJQSxNQUFJVyxjQUFKLEdBQXFCO0FBQ25CLFdBQU8sS0FBS04sZUFBWjtBQUNEOztBQUVEOzs7QUFHQU8sVUFBUTtBQUNOLFNBQUt6Qix1QkFBTCxDQUE2QjBCLHFCQUE3QixDQUFtRCxLQUFLUixlQUF4RDtBQUNBLFNBQUtsQix1QkFBTCxDQUE2QnlCLEtBQTdCO0FBQ0Q7O0FBaEcwQjtrQkFBUnRELE8iLCJmaWxlIjoibWV0YUFwaS5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IEh0dHBDbGllbnQgZnJvbSAnLi4vY2xpZW50cy9odHRwQ2xpZW50JztcbmltcG9ydCBQcm92aXNpb25pbmdQcm9maWxlQ2xpZW50IGZyb20gJy4uL2NsaWVudHMvbWV0YUFwaS9wcm92aXNpb25pbmdQcm9maWxlLmNsaWVudCc7XG5pbXBvcnQgUHJvdmlzaW9uaW5nUHJvZmlsZUFwaSBmcm9tICcuL3Byb3Zpc2lvbmluZ1Byb2ZpbGVBcGknO1xuaW1wb3J0IE1ldGFBcGlXZWJzb2NrZXRDbGllbnQgZnJvbSAnLi4vY2xpZW50cy9tZXRhQXBpL21ldGFBcGlXZWJzb2NrZXQuY2xpZW50JztcbmltcG9ydCBNZXRhdHJhZGVyQWNjb3VudEFwaSBmcm9tICcuL21ldGF0cmFkZXJBY2NvdW50QXBpJztcbmltcG9ydCBNZXRhdHJhZGVyQWNjb3VudENsaWVudCBmcm9tICcuLi9jbGllbnRzL21ldGFBcGkvbWV0YXRyYWRlckFjY291bnQuY2xpZW50JztcbmltcG9ydCBNZXRhdHJhZGVyRGVtb0FjY291bnRBcGkgZnJvbSAnLi9tZXRhdHJhZGVyRGVtb0FjY291bnRBcGknO1xuaW1wb3J0IE1ldGF0cmFkZXJEZW1vQWNjb3VudENsaWVudCBmcm9tICcuLi9jbGllbnRzL21ldGFBcGkvbWV0YXRyYWRlckRlbW9BY2NvdW50LmNsaWVudCc7XG5pbXBvcnQgSGlzdG9yaWNhbE1hcmtldERhdGFDbGllbnQgZnJvbSAnLi4vY2xpZW50cy9tZXRhQXBpL2hpc3RvcmljYWxNYXJrZXREYXRhLmNsaWVudCc7XG5pbXBvcnQgQ29ubmVjdGlvblJlZ2lzdHJ5IGZyb20gJy4vY29ubmVjdGlvblJlZ2lzdHJ5JztcbmltcG9ydCB7VmFsaWRhdGlvbkVycm9yfSBmcm9tICcuLi9jbGllbnRzL2Vycm9ySGFuZGxlcic7XG5pbXBvcnQgT3B0aW9uc1ZhbGlkYXRvciBmcm9tICcuLi9jbGllbnRzL29wdGlvbnNWYWxpZGF0b3InO1xuaW1wb3J0IExhdGVuY3lNb25pdG9yIGZyb20gJy4vbGF0ZW5jeU1vbml0b3InO1xuaW1wb3J0IEV4cGVydEFkdmlzb3JDbGllbnQgZnJvbSAnLi4vY2xpZW50cy9tZXRhQXBpL2V4cGVydEFkdmlzb3IuY2xpZW50JztcbmltcG9ydCBMb2dnZXJNYW5hZ2VyIGZyb20gJy4uL2xvZ2dlcic7XG5cbi8qKlxuICogUmVxdWVzdCByZXRyeSBvcHRpb25zXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBSZXRyeU9wdHNcbiAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBbcmV0cmllc10gbWF4aW11bSBhbW91bnQgb2YgcmVxdWVzdCByZXRyaWVzLCBkZWZhdWx0IHZhbHVlIGlzIDVcbiAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBbbWluRGVsYXlJblNlY29uZHNdIG1pbmltdW0gZGVsYXkgaW4gc2Vjb25kcyB1bnRpbCByZXF1ZXN0IHJldHJ5LCBkZWZhdWx0IHZhbHVlIGlzIDFcbiAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBbbWF4RGVsYXlJblNlY29uZHNdIG1heGltdW0gZGVsYXkgaW4gc2Vjb25kcyB1bnRpbCByZXF1ZXN0IHJldHJ5LCBkZWZhdWx0IHZhbHVlIGlzIDMwXG4gKi9cblxuLyoqXG4gKiBPcHRpb25zIGZvciBwcm9jZXNzaW5nIHdlYnNvY2tldCBjbGllbnQgZXZlbnRzXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBFdmVudFByb2Nlc3NpbmdPcHRzXG4gKiBAcHJvcGVydHkge0Jvb2xlYW59IFtzZXF1ZW50aWFsUHJvY2Vzc2luZ10gYW4gb3B0aW9uIHRvIHByb2Nlc3Mgc3luY2hyb25pemF0aW9uIGV2ZW50cyBhZnRlciBmaW5pc2hpbmdcbiAqIHByZXZpb3VzIG9uZXMsIGRlZmF1bHQgdmFsdWUgaXMgdHJ1ZVxuICovXG5cbi8qKlxuICogU3Vic2NyaXB0aW9ucyByZWZyZXNoIG9wdGlvbnNcbiAqIEB0eXBlZGVmIHtPYmplY3R9IFJlZnJlc2hTdWJzY3JpcHRpb25zT3B0c1xuICogQHByb3BlcnR5IHtOdW1iZXJ9IFttaW5EZWxheUluU2Vjb25kc10gbWluaW11bSBkZWxheSBpbiBzZWNvbmRzIHVudGlsIHN1YnNjcmlwdGlvbnMgcmVmcmVzaCByZXF1ZXN0LFxuICogZGVmYXVsdCB2YWx1ZSBpcyAxXG4gKiBAcHJvcGVydHkge051bWJlcn0gW21heERlbGF5SW5TZWNvbmRzXSBtYXhpbXVtIGRlbGF5IGluIHNlY29uZHMgdW50aWwgc3Vic2NyaXB0aW9ucyByZWZyZXNoIHJlcXVlc3QsXG4gKiBkZWZhdWx0IHZhbHVlIGlzIDYwMFxuICovXG5cbi8qKlxuICogTWV0YUFwaSBvcHRpb25zXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBNZXRhQXBpT3B0c1xuICogQHByb3BlcnR5IHtTdHJpbmd9IFthcHBsaWNhdGlvbl0gYXBwbGljYXRpb24gaWRcbiAqIEBwcm9wZXJ0eSB7U3RyaW5nfSBbZG9tYWluXSBkb21haW4gdG8gY29ubmVjdCB0bywgZGVmYXVsdCBpcyBhZ2lsaXVtdHJhZGUuYWdpbGl1bXRyYWRlLmFpXG4gKiBAcHJvcGVydHkge051bWJlcn0gW3JlcXVlc3RUaW1lb3V0XSB0aW1lb3V0IGZvciBzb2NrZXQgcmVxdWVzdHMgaW4gc2Vjb25kc1xuICogQHByb3BlcnR5IHtOdW1iZXJ9IFtjb25uZWN0VGltZW91dF0gdGltZW91dCBmb3IgY29ubmVjdGluZyB0byBzZXJ2ZXIgaW4gc2Vjb25kc1xuICogQHByb3BlcnR5IHtOdW1iZXJ9IFtwYWNrZXRPcmRlcmluZ1RpbWVvdXRdIHBhY2tldCBvcmRlcmluZyB0aW1lb3V0IGluIHNlY29uZHNcbiAqIEBwcm9wZXJ0eSB7UGFja2V0TG9nZ2VyT3B0c30gW3BhY2tldExvZ2dlcl0gcGFja2V0IGxvZ2dlciBvcHRpb25zXG4gKiBAcHJvcGVydHkge0Jvb2xlYW59IFtlbmFibGVMYXRlbmN5TW9uaXRvcl0gYW4gb3B0aW9uIHRvIGVuYWJsZSBsYXRlbmN5IHRyYWNraW5nXG4gKiBAcHJvcGVydHkge0Jvb2xlYW59IFtlbmFibGVMYXRlbmN5VHJhY2tpbmddIGFuIG9wdGlvbiB0byBlbmFibGUgbGF0ZW5jeSB0cmFja2luZ1xuICogQHByb3BlcnR5IHtTeW5jaHJvbml6YXRpb25UaHJvdHRsZXJPcHRzfSBbc3luY2hyb25pemF0aW9uVGhyb3R0bGVyXSBvcHRpb25zIGZvciBzeW5jaHJvbml6YXRpb24gdGhyb3R0bGVyXG4gKiBAcHJvcGVydHkge1JldHJ5T3B0c30gW3JldHJ5T3B0c10gb3B0aW9ucyBmb3IgcmVxdWVzdCByZXRyaWVzXG4gKiBAcHJvcGVydHkge0V2ZW50UHJvY2Vzc2luZ09wdHN9IFtldmVudFByb2Nlc3NpbmddIG9wdGlvbnMgZm9yIHJlcXVlc3QgcmV0cmllc1xuICogQHByb3BlcnR5IHtCb29sZWFufSBbdXNlU2hhcmVkQ2xpZW50QXBpXSBvcHRpb24gdG8gdXNlIGEgc2hhcmVkIHNlcnZlclxuICogQHByb3BlcnR5IHtSZWZyZXNoU3Vic2NyaXB0aW9uc09wdHN9IFtyZWZyZXNoU3Vic2NyaXB0aW9uc09wdHNdIHN1YnNjcmlwdGlvbnMgcmVmcmVzaCBvcHRpb25zXG4gKi9cblxuLyoqXG4gKiBNZXRhQXBpIE1ldGFUcmFkZXIgQVBJIFNES1xuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBNZXRhQXBpIHtcblxuICAvKipcbiAgICogRW5hYmxlcyB1c2luZyBMb2c0anMgbG9nZ2VyIHdpdGggZXh0ZW5kZWQgbG9nIGxldmVscyBmb3IgZGVidWdnaW5nIGluc3RlYWQgb2ZcbiAgICogY29uc29sZS4qIGZ1bmN0aW9ucy4gTm90ZSB0aGF0IGxvZzRqcyBjb25maWd1cmF0aW9uIHBlcmZvcm1lZCBieSB0aGUgdXNlci5cbiAgICovXG4gIHN0YXRpYyBlbmFibGVMb2c0anNMb2dnaW5nKCkge1xuICAgIExvZ2dlck1hbmFnZXIudXNlTG9nNGpzKCk7XG4gIH1cblxuICAvKipcbiAgICogQ29uc3RydWN0cyBNZXRhQXBpIGNsYXNzIGluc3RhbmNlXG4gICAqIEBwYXJhbSB7U3RyaW5nfSB0b2tlbiBhdXRob3JpemF0aW9uIHRva2VuXG4gICAqIEBwYXJhbSB7TWV0YUFwaU9wdHN9IG9wdHMgYXBwbGljYXRpb24gb3B0aW9uc1xuICAgKi9cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNvbXBsZXhpdHlcbiAgY29uc3RydWN0b3IodG9rZW4sIG9wdHMpIHtcbiAgICBjb25zdCB2YWxpZGF0b3IgPSBuZXcgT3B0aW9uc1ZhbGlkYXRvcigpO1xuICAgIG9wdHMgPSBvcHRzIHx8IHt9O1xuICAgIGNvbnN0IGFwcGxpY2F0aW9uID0gb3B0cy5hcHBsaWNhdGlvbiB8fCAnTWV0YUFwaSc7XG4gICAgY29uc3QgZG9tYWluID0gb3B0cy5kb21haW4gfHwgJ2FnaWxpdW10cmFkZS5hZ2lsaXVtdHJhZGUuYWknO1xuICAgIGNvbnN0IHJlcXVlc3RUaW1lb3V0ID0gdmFsaWRhdG9yLnZhbGlkYXRlTm9uWmVybyhvcHRzLnJlcXVlc3RUaW1lb3V0LCA2MCwgJ3JlcXVlc3RUaW1lb3V0Jyk7XG4gICAgY29uc3QgaGlzdG9yaWNhbE1hcmtldERhdGFSZXF1ZXN0VGltZW91dCA9IHZhbGlkYXRvci52YWxpZGF0ZU5vblplcm8oXG4gICAgICBvcHRzLmhpc3RvcmljYWxNYXJrZXREYXRhUmVxdWVzdFRpbWVvdXQsIDI0MCwgJ2hpc3RvcmljYWxNYXJrZXREYXRhUmVxdWVzdFRpbWVvdXQnKTtcbiAgICBjb25zdCBjb25uZWN0VGltZW91dCA9IHZhbGlkYXRvci52YWxpZGF0ZU5vblplcm8ob3B0cy5jb25uZWN0VGltZW91dCwgNjAsICdjb25uZWN0VGltZW91dCcpO1xuICAgIGNvbnN0IHBhY2tldE9yZGVyaW5nVGltZW91dCA9IHZhbGlkYXRvci52YWxpZGF0ZU5vblplcm8ob3B0cy5wYWNrZXRPcmRlcmluZ1RpbWVvdXQsIDYwLCAncGFja2V0T3JkZXJpbmdUaW1lb3V0Jyk7XG4gICAgY29uc3QgcmV0cnlPcHRzID0gb3B0cy5yZXRyeU9wdHMgfHwge307XG4gICAgY29uc3QgcGFja2V0TG9nZ2VyID0gb3B0cy5wYWNrZXRMb2dnZXIgfHwge307XG4gICAgY29uc3Qgc3luY2hyb25pemF0aW9uVGhyb3R0bGVyID0gb3B0cy5zeW5jaHJvbml6YXRpb25UaHJvdHRsZXIgfHwge307XG4gICAgY29uc3QgZGVtb0FjY291bnRSZXF1ZXN0VGltZW91dCA9IHZhbGlkYXRvci52YWxpZGF0ZU5vblplcm8ob3B0cy5kZW1vQWNjb3VudFJlcXVlc3RUaW1lb3V0LCAyNDAsXG4gICAgICAnZGVtb0FjY291bnRSZXF1ZXN0VGltZW91dCcpO1xuICAgIGlmICghYXBwbGljYXRpb24ubWF0Y2goL1thLXpBLVowLTlfXSsvKSkge1xuICAgICAgdGhyb3cgbmV3IFZhbGlkYXRpb25FcnJvcignQXBwbGljYXRpb24gbmFtZSBtdXN0IGJlIG5vbi1lbXB0eSBzdHJpbmcgY29uc2lzdGluZyBmcm9tIGxldHRlcnMsIGRpZ2l0cyBhbmQgXyBvbmx5Jyk7XG4gICAgfVxuICAgIGNvbnN0IGV2ZW50UHJvY2Vzc2luZyA9IG9wdHMuZXZlbnRQcm9jZXNzaW5nO1xuICAgIGNvbnN0IHVzZVNoYXJlZENsaWVudEFwaSA9IG9wdHMudXNlU2hhcmVkQ2xpZW50QXBpIHx8IGZhbHNlO1xuICAgIGNvbnN0IHJlZnJlc2hTdWJzY3JpcHRpb25zT3B0cyA9IG9wdHMucmVmcmVzaFN1YnNjcmlwdGlvbnNPcHRzIHx8IHt9O1xuICAgIGxldCBodHRwQ2xpZW50ID0gbmV3IEh0dHBDbGllbnQocmVxdWVzdFRpbWVvdXQsIHJldHJ5T3B0cyk7XG4gICAgbGV0IGhpc3RvcmljYWxNYXJrZXREYXRhSHR0cENsaWVudCA9IG5ldyBIdHRwQ2xpZW50KGhpc3RvcmljYWxNYXJrZXREYXRhUmVxdWVzdFRpbWVvdXQsIHJldHJ5T3B0cyk7XG4gICAgbGV0IGRlbW9BY2NvdW50SHR0cENsaWVudCA9IG5ldyBIdHRwQ2xpZW50KGRlbW9BY2NvdW50UmVxdWVzdFRpbWVvdXQsIHJldHJ5T3B0cyk7XG4gICAgdGhpcy5fbWV0YUFwaVdlYnNvY2tldENsaWVudCA9IG5ldyBNZXRhQXBpV2Vic29ja2V0Q2xpZW50KGh0dHBDbGllbnQsIHRva2VuLCB7YXBwbGljYXRpb24sIGRvbWFpbiwgcmVxdWVzdFRpbWVvdXQsXG4gICAgICBjb25uZWN0VGltZW91dCwgcGFja2V0TG9nZ2VyLCBwYWNrZXRPcmRlcmluZ1RpbWVvdXQsIHN5bmNocm9uaXphdGlvblRocm90dGxlciwgcmV0cnlPcHRzLCBcbiAgICAgIGV2ZW50UHJvY2Vzc2luZywgdXNlU2hhcmVkQ2xpZW50QXBpfSk7XG4gICAgdGhpcy5fcHJvdmlzaW9uaW5nUHJvZmlsZUFwaSA9IG5ldyBQcm92aXNpb25pbmdQcm9maWxlQXBpKG5ldyBQcm92aXNpb25pbmdQcm9maWxlQ2xpZW50KGh0dHBDbGllbnQsIHRva2VuLCBkb21haW4pKTtcbiAgICB0aGlzLl9jb25uZWN0aW9uUmVnaXN0cnkgPSBuZXcgQ29ubmVjdGlvblJlZ2lzdHJ5KHRoaXMuX21ldGFBcGlXZWJzb2NrZXRDbGllbnQsIGFwcGxpY2F0aW9uLFxuICAgICAgcmVmcmVzaFN1YnNjcmlwdGlvbnNPcHRzKTtcbiAgICBsZXQgaGlzdG9yaWNhbE1hcmtldERhdGFDbGllbnQgPSBuZXcgSGlzdG9yaWNhbE1hcmtldERhdGFDbGllbnQoaGlzdG9yaWNhbE1hcmtldERhdGFIdHRwQ2xpZW50LCB0b2tlbiwgZG9tYWluKTtcbiAgICB0aGlzLl9tZXRhdHJhZGVyQWNjb3VudEFwaSA9IG5ldyBNZXRhdHJhZGVyQWNjb3VudEFwaShuZXcgTWV0YXRyYWRlckFjY291bnRDbGllbnQoaHR0cENsaWVudCwgdG9rZW4sIGRvbWFpbiksXG4gICAgICB0aGlzLl9tZXRhQXBpV2Vic29ja2V0Q2xpZW50LCB0aGlzLl9jb25uZWN0aW9uUmVnaXN0cnksIFxuICAgICAgbmV3IEV4cGVydEFkdmlzb3JDbGllbnQoaHR0cENsaWVudCwgdG9rZW4sIGRvbWFpbiksIGhpc3RvcmljYWxNYXJrZXREYXRhQ2xpZW50KTtcbiAgICB0aGlzLl9tZXRhdHJhZGVyRGVtb0FjY291bnRBcGkgPSBuZXcgTWV0YXRyYWRlckRlbW9BY2NvdW50QXBpKFxuICAgICAgbmV3IE1ldGF0cmFkZXJEZW1vQWNjb3VudENsaWVudChkZW1vQWNjb3VudEh0dHBDbGllbnQsIHRva2VuLCBkb21haW4pKTtcbiAgICBpZiAob3B0cy5lbmFibGVMYXRlbmN5VHJhY2tpbmcgfHwgb3B0cy5lbmFibGVMYXRlbmN5TW9uaXRvcikge1xuICAgICAgdGhpcy5fbGF0ZW5jeU1vbml0b3IgPSBuZXcgTGF0ZW5jeU1vbml0b3IoKTtcbiAgICAgIHRoaXMuX21ldGFBcGlXZWJzb2NrZXRDbGllbnQuYWRkTGF0ZW5jeUxpc3RlbmVyKHRoaXMuX2xhdGVuY3lNb25pdG9yKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBwcm92aXNpb25pbmcgcHJvZmlsZSBBUElcbiAgICogQHJldHVybnMge1Byb3Zpc2lvbmluZ1Byb2ZpbGVBcGl9IHByb3Zpc2lvbmluZyBwcm9maWxlIEFQSVxuICAgKi9cbiAgZ2V0IHByb3Zpc2lvbmluZ1Byb2ZpbGVBcGkoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3Byb3Zpc2lvbmluZ1Byb2ZpbGVBcGk7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBNZXRhVHJhZGVyIGFjY291bnQgQVBJXG4gICAqIEByZXR1cm4ge01ldGF0cmFkZXJBY2NvdW50QXBpfSBNZXRhVHJhZGVyIGFjY291bnQgQVBJXG4gICAqL1xuICBnZXQgbWV0YXRyYWRlckFjY291bnRBcGkoKSB7XG4gICAgcmV0dXJuIHRoaXMuX21ldGF0cmFkZXJBY2NvdW50QXBpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgTWV0YVRyYWRlciBkZW1vIGFjY291bnQgQVBJXG4gICAqIEByZXR1cm4ge01ldGF0cmFkZXJEZW1vQWNjb3VudEFwaX0gTWV0YVRyYWRlciBkZW1vIGFjY291bnQgQVBJXG4gICAqL1xuICBnZXQgbWV0YXRyYWRlckRlbW9BY2NvdW50QXBpKCkge1xuICAgIHJldHVybiB0aGlzLl9tZXRhdHJhZGVyRGVtb0FjY291bnRBcGk7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBNZXRhQXBpIGFwcGxpY2F0aW9uIGxhdGVuY3kgbW9uaXRvclxuICAgKiBAcmV0dXJuIHtMYXRlbmN5TW9uaXRvcn0gbGF0ZW5jeSBtb25pdG9yXG4gICAqL1xuICBnZXQgbGF0ZW5jeU1vbml0b3IoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2xhdGVuY3lNb25pdG9yO1xuICB9XG5cbiAgLyoqXG4gICAqIENsb3NlcyBhbGwgY2xpZW50cyBhbmQgY29ubmVjdGlvbnNcbiAgICovXG4gIGNsb3NlKCkge1xuICAgIHRoaXMuX21ldGFBcGlXZWJzb2NrZXRDbGllbnQucmVtb3ZlTGF0ZW5jeUxpc3RlbmVyKHRoaXMuX2xhdGVuY3lNb25pdG9yKTtcbiAgICB0aGlzLl9tZXRhQXBpV2Vic29ja2V0Q2xpZW50LmNsb3NlKCk7XG4gIH1cblxufVxuIl19