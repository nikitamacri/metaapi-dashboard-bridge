'use strict';

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _index = require('../index');

var _index2 = _interopRequireDefault(_index);

var _sinon = require('sinon');

var _sinon2 = _interopRequireDefault(_sinon);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

require('dotenv').config();
const token = process.env.TOKEN;
let login = process.env.LOGIN_MT4;
let password = process.env.PASSWORD_MT4;
let serverName = process.env.SERVER_MT4 || 'Tradeview-Demo';
let brokerSrvFile = process.env.PATH_TO_BROKER_SRV || './lib/integration-tests/files/tradeview-demo.broker.srv';
const api = new _index2.default(token, { application: 'MetaApi', domain: 'project-stock.v3.agiliumlabs.cloud' });

describe('MT4 sync positions test', () => {

  async function checkPositions(connection) {
    return { local: connection.terminalState.positions.length, real: (await connection.getPositions()).length };
  }

  // eslint-disable-next-line max-statements
  it('should show correct positions amount after opening and closing', async function () {
    if (token && login) {
      const profiles = await api.provisioningProfileApi.getProvisioningProfiles();
      this.timeout(600000);
      let profile = profiles.find(p => p.name === serverName);
      if (!profile) {
        profile = await api.provisioningProfileApi.createProvisioningProfile({
          name: serverName,
          version: 4,
          brokerTimezone: 'EET',
          brokerDSTSwitchTimezone: 'EET'
        });
        await profile.uploadFile('broker.srv', brokerSrvFile);
      }
      if (profile && profile.status === 'new') {
        await profile.uploadFile('broker.srv', brokerSrvFile);
      }
      let accounts = await api.metatraderAccountApi.getAccounts();
      let account = accounts.find(a => a.login === login && a.type === 'cloud-g2');
      if (!account) {
        account = await api.metatraderAccountApi.createAccount({
          name: 'Test account-mt4',
          type: 'cloud-g2',
          login: login,
          password: password,
          server: serverName,
          provisioningProfileId: profile.id,
          application: 'MetaApi',
          magic: 1000
        });
      }
      await account.deploy();
      await account.waitConnected();
      let connection = await account.connect();
      await connection.waitSynchronized({ timeoutInSeconds: 600 });
      const startPositions = connection.terminalState.positions.length;
      const positionIds = [];
      for (let i = 0; i < 10; i++) {
        let result = await connection.createMarketBuyOrder('GBPUSD', 0.01, 0.9, 2.0);
        positionIds.push(result.positionId);
        await new _promise2.default(res => setTimeout(res, 200));
      }
      await new _promise2.default(res => setTimeout(res, 200));
      let positions = await checkPositions(connection);
      _sinon2.default.assert.match(positions.local, startPositions + 10);
      _sinon2.default.assert.match(positions.real, startPositions + 10);
      await new _promise2.default(res => setTimeout(res, 5000));
      await _promise2.default.all(positionIds.map(async id => {
        await connection.closePosition(id);
      }));
      await new _promise2.default(res => setTimeout(res, 1000));
      await _promise2.default.all(positionIds.map(async id => {
        try {
          await connection.getPosition(id);
          _sinon2.default.assert.fail();
        } catch (err) {//eslint-ignore-line
        }
      }));
      positions = await checkPositions(connection);
      _sinon2.default.assert.match(positions.local, startPositions);
      _sinon2.default.assert.match(positions.real, startPositions);
      await account.undeploy();
    }
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,