'use strict';

var _httpClient = require('../httpClient');

var _httpClient2 = _interopRequireDefault(_httpClient);

var _sinon = require('sinon');

var _sinon2 = _interopRequireDefault(_sinon);

var _historicalMarketData = require('./historicalMarketData.client');

var _historicalMarketData2 = _interopRequireDefault(_historicalMarketData);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const marketDataClientApiUrl = 'https://mt-market-data-client-api-v1.agiliumtrade.agiliumtrade.ai';

/**
 * @test {HistoricalMarketDataClient}
 */
describe('HistoricalMarketDataClient', () => {

  let client;
  const token = 'header.payload.sign';
  let httpClient = new _httpClient2.default();
  let sandbox;
  let requestStub;

  before(() => {
    sandbox = _sinon2.default.createSandbox();
  });

  beforeEach(() => {
    client = new _historicalMarketData2.default(httpClient, token);
    requestStub = sandbox.stub(httpClient, 'request');
  });

  afterEach(() => {
    sandbox.restore();
  });

  /**
   * @test {HistoricalMarketDataClient#getHistoricalCandles}
   */
  it('should download historical candles from API', async () => {
    let expected = [{
      symbol: 'AUDNZD',
      timeframe: '15m',
      time: new Date('2020-04-07T03:45:00.000Z'),
      brokerTime: '2020-04-07 06:45:00.000',
      open: 1.03297,
      high: 1.06309,
      low: 1.02705,
      close: 1.043,
      tickVolume: 1435,
      spread: 17,
      volume: 345
    }];
    requestStub.resolves(expected);
    let candles = await client.getHistoricalCandles('accountId', 'AUDNZD', '15m', new Date('2020-04-07T03:45:00.000Z'), 1);
    candles.should.equal(expected);
    _sinon2.default.assert.calledOnceWithExactly(httpClient.request, {
      url: `${marketDataClientApiUrl}/users/current/accounts/accountId/historical-market-data/symbols/AUDNZD/` + 'timeframes/15m/candles',
      method: 'GET',
      qs: {
        startTime: new Date('2020-04-07T03:45:00.000Z'),
        limit: 1
      },
      headers: {
        'auth-token': token
      },
      json: true
    });
  });

  /**
   * @test {HistoricalMarketDataClient#getHistoricalTicks}
   */
  it('should download historical ticks from API', async () => {
    let expected = [{
      symbol: 'AUDNZD',
      time: new Date('2020-04-07T03:45:00.000Z'),
      brokerTime: '2020-04-07 06:45:00.000',
      bid: 1.05297,
      ask: 1.05309,
      last: 0.5298,
      volume: 0.13,
      side: 'buy'
    }];
    requestStub.resolves(expected);
    let ticks = await client.getHistoricalTicks('accountId', 'AUDNZD', new Date('2020-04-07T03:45:00.000Z'), 0, 1);
    ticks.should.equal(expected);
    _sinon2.default.assert.calledOnceWithExactly(httpClient.request, {
      url: `${marketDataClientApiUrl}/users/current/accounts/accountId/historical-market-data/symbols/AUDNZD/ticks`,
      method: 'GET',
      qs: {
        startTime: new Date('2020-04-07T03:45:00.000Z'),
        offset: 0,
        limit: 1
      },
      headers: {
        'auth-token': token
      },
      json: true
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9jbGllbnRzL21ldGFBcGkvaGlzdG9yaWNhbE1hcmtldERhdGEuY2xpZW50LnNwZWMuZXM2Il0sIm5hbWVzIjpbIm1hcmtldERhdGFDbGllbnRBcGlVcmwiLCJkZXNjcmliZSIsImNsaWVudCIsInRva2VuIiwiaHR0cENsaWVudCIsIkh0dHBDbGllbnQiLCJzYW5kYm94IiwicmVxdWVzdFN0dWIiLCJiZWZvcmUiLCJzaW5vbiIsImNyZWF0ZVNhbmRib3giLCJiZWZvcmVFYWNoIiwiSGlzdG9yaWNhbE1hcmtldERhdGFDbGllbnQiLCJzdHViIiwiYWZ0ZXJFYWNoIiwicmVzdG9yZSIsIml0IiwiZXhwZWN0ZWQiLCJzeW1ib2wiLCJ0aW1lZnJhbWUiLCJ0aW1lIiwiRGF0ZSIsImJyb2tlclRpbWUiLCJvcGVuIiwiaGlnaCIsImxvdyIsImNsb3NlIiwidGlja1ZvbHVtZSIsInNwcmVhZCIsInZvbHVtZSIsInJlc29sdmVzIiwiY2FuZGxlcyIsImdldEhpc3RvcmljYWxDYW5kbGVzIiwic2hvdWxkIiwiZXF1YWwiLCJhc3NlcnQiLCJjYWxsZWRPbmNlV2l0aEV4YWN0bHkiLCJyZXF1ZXN0IiwidXJsIiwibWV0aG9kIiwicXMiLCJzdGFydFRpbWUiLCJsaW1pdCIsImhlYWRlcnMiLCJqc29uIiwiYmlkIiwiYXNrIiwibGFzdCIsInNpZGUiLCJ0aWNrcyIsImdldEhpc3RvcmljYWxUaWNrcyIsIm9mZnNldCJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7Ozs7QUFDQTs7OztBQUNBOzs7Ozs7QUFFQSxNQUFNQSx5QkFBeUIsbUVBQS9COztBQUVBOzs7QUFHQUMsU0FBUyw0QkFBVCxFQUF1QyxNQUFNOztBQUUzQyxNQUFJQyxNQUFKO0FBQ0EsUUFBTUMsUUFBUSxxQkFBZDtBQUNBLE1BQUlDLGFBQWEsSUFBSUMsb0JBQUosRUFBakI7QUFDQSxNQUFJQyxPQUFKO0FBQ0EsTUFBSUMsV0FBSjs7QUFFQUMsU0FBTyxNQUFNO0FBQ1hGLGNBQVVHLGdCQUFNQyxhQUFOLEVBQVY7QUFDRCxHQUZEOztBQUlBQyxhQUFXLE1BQU07QUFDZlQsYUFBUyxJQUFJVSw4QkFBSixDQUErQlIsVUFBL0IsRUFBMkNELEtBQTNDLENBQVQ7QUFDQUksa0JBQWNELFFBQVFPLElBQVIsQ0FBYVQsVUFBYixFQUF5QixTQUF6QixDQUFkO0FBQ0QsR0FIRDs7QUFLQVUsWUFBVSxNQUFNO0FBQ2RSLFlBQVFTLE9BQVI7QUFDRCxHQUZEOztBQUlBOzs7QUFHQUMsS0FBRyw2Q0FBSCxFQUFrRCxZQUFZO0FBQzVELFFBQUlDLFdBQVcsQ0FBQztBQUNkQyxjQUFRLFFBRE07QUFFZEMsaUJBQVcsS0FGRztBQUdkQyxZQUFNLElBQUlDLElBQUosQ0FBUywwQkFBVCxDQUhRO0FBSWRDLGtCQUFZLHlCQUpFO0FBS2RDLFlBQU0sT0FMUTtBQU1kQyxZQUFNLE9BTlE7QUFPZEMsV0FBSyxPQVBTO0FBUWRDLGFBQU8sS0FSTztBQVNkQyxrQkFBWSxJQVRFO0FBVWRDLGNBQVEsRUFWTTtBQVdkQyxjQUFRO0FBWE0sS0FBRCxDQUFmO0FBYUF0QixnQkFBWXVCLFFBQVosQ0FBcUJiLFFBQXJCO0FBQ0EsUUFBSWMsVUFBVSxNQUFNN0IsT0FBTzhCLG9CQUFQLENBQTRCLFdBQTVCLEVBQXlDLFFBQXpDLEVBQW1ELEtBQW5ELEVBQTBELElBQUlYLElBQUosQ0FBUywwQkFBVCxDQUExRCxFQUNsQixDQURrQixDQUFwQjtBQUVBVSxZQUFRRSxNQUFSLENBQWVDLEtBQWYsQ0FBcUJqQixRQUFyQjtBQUNBUixvQkFBTTBCLE1BQU4sQ0FBYUMscUJBQWIsQ0FBbUNoQyxXQUFXaUMsT0FBOUMsRUFBdUQ7QUFDckRDLFdBQU0sR0FBRXRDLHNCQUF1QiwwRUFBMUIsR0FDSCx3QkFGbUQ7QUFHckR1QyxjQUFRLEtBSDZDO0FBSXJEQyxVQUFJO0FBQ0ZDLG1CQUFXLElBQUlwQixJQUFKLENBQVMsMEJBQVQsQ0FEVDtBQUVGcUIsZUFBTztBQUZMLE9BSmlEO0FBUXJEQyxlQUFTO0FBQ1Asc0JBQWN4QztBQURQLE9BUjRDO0FBV3JEeUMsWUFBTTtBQVgrQyxLQUF2RDtBQWFELEdBL0JEOztBQWlDQTs7O0FBR0E1QixLQUFHLDJDQUFILEVBQWdELFlBQVk7QUFDMUQsUUFBSUMsV0FBVyxDQUFDO0FBQ2RDLGNBQVEsUUFETTtBQUVkRSxZQUFNLElBQUlDLElBQUosQ0FBUywwQkFBVCxDQUZRO0FBR2RDLGtCQUFZLHlCQUhFO0FBSWR1QixXQUFLLE9BSlM7QUFLZEMsV0FBSyxPQUxTO0FBTWRDLFlBQU0sTUFOUTtBQU9kbEIsY0FBUSxJQVBNO0FBUWRtQixZQUFNO0FBUlEsS0FBRCxDQUFmO0FBVUF6QyxnQkFBWXVCLFFBQVosQ0FBcUJiLFFBQXJCO0FBQ0EsUUFBSWdDLFFBQVEsTUFBTS9DLE9BQU9nRCxrQkFBUCxDQUEwQixXQUExQixFQUF1QyxRQUF2QyxFQUFpRCxJQUFJN0IsSUFBSixDQUFTLDBCQUFULENBQWpELEVBQXVGLENBQXZGLEVBQTBGLENBQTFGLENBQWxCO0FBQ0E0QixVQUFNaEIsTUFBTixDQUFhQyxLQUFiLENBQW1CakIsUUFBbkI7QUFDQVIsb0JBQU0wQixNQUFOLENBQWFDLHFCQUFiLENBQW1DaEMsV0FBV2lDLE9BQTlDLEVBQXVEO0FBQ3JEQyxXQUFNLEdBQUV0QyxzQkFBdUIsK0VBRHNCO0FBRXJEdUMsY0FBUSxLQUY2QztBQUdyREMsVUFBSTtBQUNGQyxtQkFBVyxJQUFJcEIsSUFBSixDQUFTLDBCQUFULENBRFQ7QUFFRjhCLGdCQUFRLENBRk47QUFHRlQsZUFBTztBQUhMLE9BSGlEO0FBUXJEQyxlQUFTO0FBQ1Asc0JBQWN4QztBQURQLE9BUjRDO0FBV3JEeUMsWUFBTTtBQVgrQyxLQUF2RDtBQWFELEdBM0JEO0FBNkJELENBekZEIiwiZmlsZSI6Imhpc3RvcmljYWxNYXJrZXREYXRhLmNsaWVudC5zcGVjLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgSHR0cENsaWVudCBmcm9tICcuLi9odHRwQ2xpZW50JztcbmltcG9ydCBzaW5vbiBmcm9tICdzaW5vbic7XG5pbXBvcnQgSGlzdG9yaWNhbE1hcmtldERhdGFDbGllbnQgZnJvbSAnLi9oaXN0b3JpY2FsTWFya2V0RGF0YS5jbGllbnQnO1xuXG5jb25zdCBtYXJrZXREYXRhQ2xpZW50QXBpVXJsID0gJ2h0dHBzOi8vbXQtbWFya2V0LWRhdGEtY2xpZW50LWFwaS12MS5hZ2lsaXVtdHJhZGUuYWdpbGl1bXRyYWRlLmFpJztcblxuLyoqXG4gKiBAdGVzdCB7SGlzdG9yaWNhbE1hcmtldERhdGFDbGllbnR9XG4gKi9cbmRlc2NyaWJlKCdIaXN0b3JpY2FsTWFya2V0RGF0YUNsaWVudCcsICgpID0+IHtcblxuICBsZXQgY2xpZW50O1xuICBjb25zdCB0b2tlbiA9ICdoZWFkZXIucGF5bG9hZC5zaWduJztcbiAgbGV0IGh0dHBDbGllbnQgPSBuZXcgSHR0cENsaWVudCgpO1xuICBsZXQgc2FuZGJveDtcbiAgbGV0IHJlcXVlc3RTdHViO1xuXG4gIGJlZm9yZSgoKSA9PiB7XG4gICAgc2FuZGJveCA9IHNpbm9uLmNyZWF0ZVNhbmRib3goKTtcbiAgfSk7XG5cbiAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgY2xpZW50ID0gbmV3IEhpc3RvcmljYWxNYXJrZXREYXRhQ2xpZW50KGh0dHBDbGllbnQsIHRva2VuKTtcbiAgICByZXF1ZXN0U3R1YiA9IHNhbmRib3guc3R1YihodHRwQ2xpZW50LCAncmVxdWVzdCcpO1xuICB9KTtcblxuICBhZnRlckVhY2goKCkgPT4ge1xuICAgIHNhbmRib3gucmVzdG9yZSgpO1xuICB9KTtcblxuICAvKipcbiAgICogQHRlc3Qge0hpc3RvcmljYWxNYXJrZXREYXRhQ2xpZW50I2dldEhpc3RvcmljYWxDYW5kbGVzfVxuICAgKi9cbiAgaXQoJ3Nob3VsZCBkb3dubG9hZCBoaXN0b3JpY2FsIGNhbmRsZXMgZnJvbSBBUEknLCBhc3luYyAoKSA9PiB7XG4gICAgbGV0IGV4cGVjdGVkID0gW3tcbiAgICAgIHN5bWJvbDogJ0FVRE5aRCcsXG4gICAgICB0aW1lZnJhbWU6ICcxNW0nLFxuICAgICAgdGltZTogbmV3IERhdGUoJzIwMjAtMDQtMDdUMDM6NDU6MDAuMDAwWicpLFxuICAgICAgYnJva2VyVGltZTogJzIwMjAtMDQtMDcgMDY6NDU6MDAuMDAwJyxcbiAgICAgIG9wZW46IDEuMDMyOTcsXG4gICAgICBoaWdoOiAxLjA2MzA5LFxuICAgICAgbG93OiAxLjAyNzA1LFxuICAgICAgY2xvc2U6IDEuMDQzLFxuICAgICAgdGlja1ZvbHVtZTogMTQzNSxcbiAgICAgIHNwcmVhZDogMTcsXG4gICAgICB2b2x1bWU6IDM0NVxuICAgIH1dO1xuICAgIHJlcXVlc3RTdHViLnJlc29sdmVzKGV4cGVjdGVkKTtcbiAgICBsZXQgY2FuZGxlcyA9IGF3YWl0IGNsaWVudC5nZXRIaXN0b3JpY2FsQ2FuZGxlcygnYWNjb3VudElkJywgJ0FVRE5aRCcsICcxNW0nLCBuZXcgRGF0ZSgnMjAyMC0wNC0wN1QwMzo0NTowMC4wMDBaJyksXG4gICAgICAxKTtcbiAgICBjYW5kbGVzLnNob3VsZC5lcXVhbChleHBlY3RlZCk7XG4gICAgc2lub24uYXNzZXJ0LmNhbGxlZE9uY2VXaXRoRXhhY3RseShodHRwQ2xpZW50LnJlcXVlc3QsIHtcbiAgICAgIHVybDogYCR7bWFya2V0RGF0YUNsaWVudEFwaVVybH0vdXNlcnMvY3VycmVudC9hY2NvdW50cy9hY2NvdW50SWQvaGlzdG9yaWNhbC1tYXJrZXQtZGF0YS9zeW1ib2xzL0FVRE5aRC9gICtcbiAgICAgICAgJ3RpbWVmcmFtZXMvMTVtL2NhbmRsZXMnLFxuICAgICAgbWV0aG9kOiAnR0VUJyxcbiAgICAgIHFzOiB7XG4gICAgICAgIHN0YXJ0VGltZTogbmV3IERhdGUoJzIwMjAtMDQtMDdUMDM6NDU6MDAuMDAwWicpLFxuICAgICAgICBsaW1pdDogMVxuICAgICAgfSxcbiAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgJ2F1dGgtdG9rZW4nOiB0b2tlblxuICAgICAgfSxcbiAgICAgIGpzb246IHRydWVcbiAgICB9KTtcbiAgfSk7XG5cbiAgLyoqXG4gICAqIEB0ZXN0IHtIaXN0b3JpY2FsTWFya2V0RGF0YUNsaWVudCNnZXRIaXN0b3JpY2FsVGlja3N9XG4gICAqL1xuICBpdCgnc2hvdWxkIGRvd25sb2FkIGhpc3RvcmljYWwgdGlja3MgZnJvbSBBUEknLCBhc3luYyAoKSA9PiB7XG4gICAgbGV0IGV4cGVjdGVkID0gW3tcbiAgICAgIHN5bWJvbDogJ0FVRE5aRCcsXG4gICAgICB0aW1lOiBuZXcgRGF0ZSgnMjAyMC0wNC0wN1QwMzo0NTowMC4wMDBaJyksXG4gICAgICBicm9rZXJUaW1lOiAnMjAyMC0wNC0wNyAwNjo0NTowMC4wMDAnLFxuICAgICAgYmlkOiAxLjA1Mjk3LFxuICAgICAgYXNrOiAxLjA1MzA5LFxuICAgICAgbGFzdDogMC41Mjk4LFxuICAgICAgdm9sdW1lOiAwLjEzLFxuICAgICAgc2lkZTogJ2J1eSdcbiAgICB9XTtcbiAgICByZXF1ZXN0U3R1Yi5yZXNvbHZlcyhleHBlY3RlZCk7XG4gICAgbGV0IHRpY2tzID0gYXdhaXQgY2xpZW50LmdldEhpc3RvcmljYWxUaWNrcygnYWNjb3VudElkJywgJ0FVRE5aRCcsIG5ldyBEYXRlKCcyMDIwLTA0LTA3VDAzOjQ1OjAwLjAwMFonKSwgMCwgMSk7XG4gICAgdGlja3Muc2hvdWxkLmVxdWFsKGV4cGVjdGVkKTtcbiAgICBzaW5vbi5hc3NlcnQuY2FsbGVkT25jZVdpdGhFeGFjdGx5KGh0dHBDbGllbnQucmVxdWVzdCwge1xuICAgICAgdXJsOiBgJHttYXJrZXREYXRhQ2xpZW50QXBpVXJsfS91c2Vycy9jdXJyZW50L2FjY291bnRzL2FjY291bnRJZC9oaXN0b3JpY2FsLW1hcmtldC1kYXRhL3N5bWJvbHMvQVVETlpEL3RpY2tzYCxcbiAgICAgIG1ldGhvZDogJ0dFVCcsXG4gICAgICBxczoge1xuICAgICAgICBzdGFydFRpbWU6IG5ldyBEYXRlKCcyMDIwLTA0LTA3VDAzOjQ1OjAwLjAwMFonKSxcbiAgICAgICAgb2Zmc2V0OiAwLFxuICAgICAgICBsaW1pdDogMVxuICAgICAgfSxcbiAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgJ2F1dGgtdG9rZW4nOiB0b2tlblxuICAgICAgfSxcbiAgICAgIGpzb246IHRydWVcbiAgICB9KTtcbiAgfSk7XG5cbn0pO1xuIl19