'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.HttpClientMock = undefined;

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _requestPromiseAny = require('request-promise-any');

var _requestPromiseAny2 = _interopRequireDefault(_requestPromiseAny);

var _errorHandler = require('./errorHandler');

var _timeoutError = require('./timeoutError');

var _timeoutError2 = _interopRequireDefault(_timeoutError);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * HTTP client library based on request-promise
 */
class HttpClient {

  /**
   * @typedef {Object} RetryOptions retry options
   * @property {Number} [retries] the number of attempts to retry failed request, default 5
   * @property {Number} [minDelayInSeconds] minimum delay in seconds before retrying, default 1
   * @property {Number} [maxDelayInSeconds] maximum delay in seconds before retrying, default 30
   */

  /**
   * Constructs HttpClient class instance
   * @param {Number} timeout request timeout in seconds
   * @param {RetryOptions} [retryOpts] retry options
   */
  constructor(timeout = 60, retryOpts = {}) {
    this._timeout = timeout * 1000;
    this._retries = retryOpts.retries || 5;
    this._minRetryDelay = (retryOpts.minDelayInSeconds || 1) * 1000;
    this._maxRetryDelay = (retryOpts.maxDelayInSeconds || 30) * 1000;
  }

  /**
   * Performs a request. Response errors are returned as ApiError or subclasses.
   * @param {Object} options request options
   * @returns {Object|String|any} request result
   */
  async request(options, retryCounter = 0, endTime = Date.now() + this._maxRetryDelay * this._retries) {
    options.timeout = this._timeout;
    let retryAfterSeconds = 0;
    options.callback = (e, res) => {
      if (res && res.statusCode === 202) {
        retryAfterSeconds = res.headers['retry-after'];
      }
    };
    let body;
    try {
      body = await this._makeRequest(options);
    } catch (err) {
      retryCounter = await this._handleError(err, retryCounter, endTime);
      return this.request(options, retryCounter, endTime);
    }
    if (retryAfterSeconds) {
      await this._handleRetry(endTime, retryAfterSeconds * 1000);
      body = await this.request(options, retryCounter, endTime);
    }
    return body;
  }

  _makeRequest(options) {
    return (0, _requestPromiseAny2.default)(options);
  }

  async _wait(pause) {
    await new _promise2.default(res => setTimeout(res, pause));
  }

  async _handleRetry(endTime, retryAfter) {
    if (endTime > Date.now() + retryAfter) {
      await this._wait(retryAfter);
    } else {
      throw new _timeoutError2.default('Timed out waiting for the end of the process of calculating metrics');
    }
  }

  async _handleError(err, retryCounter, endTime) {
    const error = this._convertError(err);
    if (['InternalError', 'ApiError'].includes(error.name) && retryCounter < this._retries) {
      const pause = Math.min(Math.pow(2, retryCounter) * this._minRetryDelay, this._maxRetryDelay);
      await this._wait(pause);
      return retryCounter + 1;
    } else if (error.name === 'TooManyRequestsError') {
      const retryTime = Date.parse(error.metadata.recommendedRetryTime);
      if (retryTime < endTime) {
        await this._wait(retryTime - Date.now());
        return retryCounter;
      }
    }
    throw error;
  }

  // eslint-disable-next-line complexity
  _convertError(err) {
    err.error = err.error || {};
    let status = err.statusCode || err.status;
    switch (status) {
      case 400:
        return new _errorHandler.ValidationError(err.error.message || err.message, err.error.details || err.details);
      case 401:
        return new _errorHandler.UnauthorizedError(err.error.message || err.message);
      case 403:
        return new _errorHandler.ForbiddenError(err.error.message || err.message);
      case 404:
        return new _errorHandler.NotFoundError(err.error.message || err.message);
      case 429:
        return new _errorHandler.TooManyRequestsError(err.error.message || err.message, err.error.metadata || err.metadata);
      case 500:
        return new _errorHandler.InternalError(err.error.message || err.message);
      default:
        return new _errorHandler.ApiError(_errorHandler.ApiError, err.error.message || err.message, status);
    }
  }

}

exports.default = HttpClient; /**
                               * HTTP client service mock for tests
                               */

class HttpClientMock extends HttpClient {

  /**
   * Constructs HTTP client mock
   * @param {Function(options:Object):Promise} requestFn mocked request function
   * @param {Number} timeout request timeout in seconds
   * @param {RetryOptions} retryOpts retry options
   */
  constructor(requestFn, timeout, retryOpts) {
    super(timeout, retryOpts);
    this._requestFn = requestFn;
  }

  _makeRequest() {
    return this._requestFn.apply(this, arguments);
  }

}
exports.HttpClientMock = HttpClientMock;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2xpYi9jbGllbnRzL2h0dHBDbGllbnQuZXM2Il0sIm5hbWVzIjpbIkh0dHBDbGllbnQiLCJjb25zdHJ1Y3RvciIsInRpbWVvdXQiLCJyZXRyeU9wdHMiLCJfdGltZW91dCIsIl9yZXRyaWVzIiwicmV0cmllcyIsIl9taW5SZXRyeURlbGF5IiwibWluRGVsYXlJblNlY29uZHMiLCJfbWF4UmV0cnlEZWxheSIsIm1heERlbGF5SW5TZWNvbmRzIiwicmVxdWVzdCIsIm9wdGlvbnMiLCJyZXRyeUNvdW50ZXIiLCJlbmRUaW1lIiwiRGF0ZSIsIm5vdyIsInJldHJ5QWZ0ZXJTZWNvbmRzIiwiY2FsbGJhY2siLCJlIiwicmVzIiwic3RhdHVzQ29kZSIsImhlYWRlcnMiLCJib2R5IiwiX21ha2VSZXF1ZXN0IiwiZXJyIiwiX2hhbmRsZUVycm9yIiwiX2hhbmRsZVJldHJ5IiwiX3dhaXQiLCJwYXVzZSIsInNldFRpbWVvdXQiLCJyZXRyeUFmdGVyIiwiVGltZW91dEVycm9yIiwiZXJyb3IiLCJfY29udmVydEVycm9yIiwiaW5jbHVkZXMiLCJuYW1lIiwiTWF0aCIsIm1pbiIsInBvdyIsInJldHJ5VGltZSIsInBhcnNlIiwibWV0YWRhdGEiLCJyZWNvbW1lbmRlZFJldHJ5VGltZSIsInN0YXR1cyIsIlZhbGlkYXRpb25FcnJvciIsIm1lc3NhZ2UiLCJkZXRhaWxzIiwiVW5hdXRob3JpemVkRXJyb3IiLCJGb3JiaWRkZW5FcnJvciIsIk5vdEZvdW5kRXJyb3IiLCJUb29NYW55UmVxdWVzdHNFcnJvciIsIkludGVybmFsRXJyb3IiLCJBcGlFcnJvciIsIkh0dHBDbGllbnRNb2NrIiwicmVxdWVzdEZuIiwiX3JlcXVlc3RGbiIsImFwcGx5IiwiYXJndW1lbnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7QUFFQTs7OztBQUNBOztBQUdBOzs7Ozs7QUFFQTs7O0FBR2UsTUFBTUEsVUFBTixDQUFpQjs7QUFFOUI7Ozs7Ozs7QUFPQTs7Ozs7QUFLQUMsY0FB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QUNGLFdBQUssR0FBTDtBQUNFLGVBQU8sSUFBSVUsMkJBQUosQ0FBa0IzQixJQUFJUSxLQUFKLENBQVVhLE9BQVYsSUFBcUJyQixJQUFJcUIsT0FBM0MsQ0FBUDtBQUNGO0FBQ0UsZUFBTyxJQUFJTyxzQkFBSixDQUFhQSxzQkFBYixFQUF1QjVCLElBQUlRLEtBQUosQ0FBVWEsT0FBVixJQUFxQnJCLElBQUlxQixPQUFoRCxFQUF5REYsTUFBekQsQ0FBUDtBQWRGO0FBZ0JEOztBQXBHNkI7O2tCQUFYNUMsVSxFQXdHckI7Ozs7QUFHTyxNQUFNc0QsY0FBTixTQUE2QnRELFVBQTdCLENBQXdDOztBQUU3Qzs7Ozs7O0FBTUFDLGNBQVlzRCxTQUFaLEVBQXVCckQsT0FBdkIsRUFBZ0NDLFNBQWhDLEVBQTJDO0FBQ3pDLFVBQU1ELE9BQU4sRUFBZUMsU0FBZjtBQUNBLFNBQUtxRCxVQUFMLEdBQWtCRCxTQUFsQjtBQUNEOztBQUVEL0IsaUJBQWU7QUFDYixXQUFPLEtBQUtnQyxVQUFMLENBQWdCQyxLQUFoQixDQUFzQixJQUF0QixFQUE0QkMsU0FBNUIsQ0FBUDtBQUNEOztBQWY0QztRQUFsQ0osYyxHQUFBQSxjIiwiZmlsZSI6Imh0dHBDbGllbnQuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmltcG9ydCByZXF1ZXN0IGZyb20gJ3JlcXVlc3QtcHJvbWlzZS1hbnknO1xuaW1wb3J0IHtcbiAgVW5hdXRob3JpemVkRXJyb3IsIEZvcmJpZGRlbkVycm9yLCBBcGlFcnJvciwgVmFsaWRhdGlvbkVycm9yLCBJbnRlcm5hbEVycm9yLCBOb3RGb3VuZEVycm9yLCBUb29NYW55UmVxdWVzdHNFcnJvclxufSBmcm9tICcuL2Vycm9ySGFuZGxlcic7XG5pbXBvcnQgVGltZW91dEVycm9yIGZyb20gJy4vdGltZW91dEVycm9yJztcblxuLyoqXG4gKiBIVFRQIGNsaWVudCBsaWJyYXJ5IGJhc2VkIG9uIHJlcXVlc3QtcHJvbWlzZVxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBIdHRwQ2xpZW50IHtcblxuICAvKipcbiAgICogQHR5cGVkZWYge09iamVjdH0gUmV0cnlPcHRpb25zIHJldHJ5IG9wdGlvbnNcbiAgICogQHByb3BlcnR5IHtOdW1iZXJ9IFtyZXRyaWVzXSB0aGUgbnVtYmVyIG9mIGF0dGVtcHRzIHRvIHJldHJ5IGZhaWxlZCByZXF1ZXN0LCBkZWZhdWx0IDVcbiAgICogQHByb3BlcnR5IHtOdW1iZXJ9IFttaW5EZWxheUluU2Vjb25kc10gbWluaW11bSBkZWxheSBpbiBzZWNvbmRzIGJlZm9yZSByZXRyeWluZywgZGVmYXVsdCAxXG4gICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBbbWF4RGVsYXlJblNlY29uZHNdIG1heGltdW0gZGVsYXkgaW4gc2Vjb25kcyBiZWZvcmUgcmV0cnlpbmcsIGRlZmF1bHQgMzBcbiAgICovXG5cbiAgLyoqXG4gICAqIENvbnN0cnVjdHMgSHR0cENsaWVudCBjbGFzcyBpbnN0YW5jZVxuICAgKiBAcGFyYW0ge051bWJlcn0gdGltZW91dCByZXF1ZXN0IHRpbWVvdXQgaW4gc2Vjb25kc1xuICAgKiBAcGFyYW0ge1JldHJ5T3B0aW9uc30gW3JldHJ5T3B0c10gcmV0cnkgb3B0aW9uc1xuICAgKi9cbiAgY29uc3RydWN0b3IodGltZW91dCA9IDYwLCByZXRyeU9wdHMgPSB7fSkge1xuICAgIHRoaXMuX3RpbWVvdXQgPSB0aW1lb3V0ICogMTAwMDtcbiAgICB0aGlzLl9yZXRyaWVzID0gcmV0cnlPcHRzLnJldHJpZXMgfHwgNTtcbiAgICB0aGlzLl9taW5SZXRyeURlbGF5ID0gKHJldHJ5T3B0cy5taW5EZWxheUluU2Vjb25kcyB8fCAxKSAqIDEwMDA7XG4gICAgdGhpcy5fbWF4UmV0cnlEZWxheSA9IChyZXRyeU9wdHMubWF4RGVsYXlJblNlY29uZHMgfHwgMzApICogMTAwMDtcbiAgfVxuXG4gIC8qKlxuICAgKiBQZXJmb3JtcyBhIHJlcXVlc3QuIFJlc3BvbnNlIGVycm9ycyBhcmUgcmV0dXJuZWQgYXMgQXBpRXJyb3Igb3Igc3ViY2xhc3Nlcy5cbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgcmVxdWVzdCBvcHRpb25zXG4gICAqIEByZXR1cm5zIHtPYmplY3R8U3RyaW5nfGFueX0gcmVxdWVzdCByZXN1bHRcbiAgICovXG4gIGFzeW5jIHJlcXVlc3Qob3B0aW9ucywgcmV0cnlDb3VudGVyID0gMCwgZW5kVGltZSA9IERhdGUubm93KCkgKyB0aGlzLl9tYXhSZXRyeURlbGF5ICogdGhpcy5fcmV0cmllcykge1xuICAgIG9wdGlvbnMudGltZW91dCA9IHRoaXMuX3RpbWVvdXQ7XG4gICAgbGV0IHJldHJ5QWZ0ZXJTZWNvbmRzID0gMDtcbiAgICBvcHRpb25zLmNhbGxiYWNrID0gKGUsIHJlcykgPT4ge1xuICAgICAgaWYgKHJlcyAmJiByZXMuc3RhdHVzQ29kZSA9PT0gMjAyKSB7XG4gICAgICAgIHJldHJ5QWZ0ZXJTZWNvbmRzID0gcmVzLmhlYWRlcnNbJ3JldHJ5LWFmdGVyJ107XG4gICAgICB9XG4gICAgfTtcbiAgICBsZXQgYm9keTtcbiAgICB0cnkge1xuICAgICAgYm9keSA9IGF3YWl0IHRoaXMuX21ha2VSZXF1ZXN0KG9wdGlvbnMpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgcmV0cnlDb3VudGVyID0gYXdhaXQgdGhpcy5faGFuZGxlRXJyb3IoZXJyLCByZXRyeUNvdW50ZXIsIGVuZFRpbWUpO1xuICAgICAgcmV0dXJuIHRoaXMucmVxdWVzdChvcHRpb25zLCByZXRyeUNvdW50ZXIsIGVuZFRpbWUpO1xuICAgIH1cbiAgICBpZiAocmV0cnlBZnRlclNlY29uZHMpIHtcbiAgICAgIGF3YWl0IHRoaXMuX2hhbmRsZVJldHJ5KGVuZFRpbWUsIHJldHJ5QWZ0ZXJTZWNvbmRzICogMTAwMCk7XG4gICAgICBib2R5ID0gYXdhaXQgdGhpcy5yZXF1ZXN0KG9wdGlvbnMsIHJldHJ5Q291bnRlciwgZW5kVGltZSk7XG4gICAgfVxuICAgIHJldHVybiBib2R5O1xuICB9XG5cbiAgX21ha2VSZXF1ZXN0KG9wdGlvbnMpIHtcbiAgICByZXR1cm4gcmVxdWVzdChvcHRpb25zKTtcbiAgfVxuXG4gIGFzeW5jIF93YWl0KHBhdXNlKSB7XG4gICAgYXdhaXQgbmV3IFByb21pc2UocmVzID0+IHNldFRpbWVvdXQocmVzLCBwYXVzZSkpO1xuICB9XG5cbiAgYXN5bmMgX2hhbmRsZVJldHJ5KGVuZFRpbWUsIHJldHJ5QWZ0ZXIpIHtcbiAgICBpZihlbmRUaW1lID4gRGF0ZS5ub3coKSArIHJldHJ5QWZ0ZXIpIHtcbiAgICAgIGF3YWl0IHRoaXMuX3dhaXQocmV0cnlBZnRlcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBUaW1lb3V0RXJyb3IoJ1RpbWVkIG91dCB3YWl0aW5nIGZvciB0aGUgZW5kIG9mIHRoZSBwcm9jZXNzIG9mIGNhbGN1bGF0aW5nIG1ldHJpY3MnKTtcbiAgICB9XG4gIH1cblxuICBhc3luYyBfaGFuZGxlRXJyb3IoZXJyLCByZXRyeUNvdW50ZXIsIGVuZFRpbWUpIHtcbiAgICBjb25zdCBlcnJvciA9IHRoaXMuX2NvbnZlcnRFcnJvcihlcnIpO1xuICAgIGlmKFsnSW50ZXJuYWxFcnJvcicsICdBcGlFcnJvciddLmluY2x1ZGVzKGVycm9yLm5hbWUpICYmIHJldHJ5Q291bnRlciA8IHRoaXMuX3JldHJpZXMpIHtcbiAgICAgIGNvbnN0IHBhdXNlID0gTWF0aC5taW4oTWF0aC5wb3coMiwgcmV0cnlDb3VudGVyKSAqIHRoaXMuX21pblJldHJ5RGVsYXksIHRoaXMuX21heFJldHJ5RGVsYXkpO1xuICAgICAgYXdhaXQgdGhpcy5fd2FpdChwYXVzZSk7XG4gICAgICByZXR1cm4gcmV0cnlDb3VudGVyICsgMTtcbiAgICB9IGVsc2UgaWYoZXJyb3IubmFtZSA9PT0gJ1Rvb01hbnlSZXF1ZXN0c0Vycm9yJykge1xuICAgICAgY29uc3QgcmV0cnlUaW1lID0gRGF0ZS5wYXJzZShlcnJvci5tZXRhZGF0YS5yZWNvbW1lbmRlZFJldHJ5VGltZSk7XG4gICAgICBpZiAocmV0cnlUaW1lIDwgZW5kVGltZSkge1xuICAgICAgICBhd2FpdCB0aGlzLl93YWl0KHJldHJ5VGltZSAtIERhdGUubm93KCkpO1xuICAgICAgICByZXR1cm4gcmV0cnlDb3VudGVyO1xuICAgICAgfVxuICAgIH1cbiAgICB0aHJvdyBlcnJvcjtcbiAgfVxuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjb21wbGV4aXR5XG4gIF9jb252ZXJ0RXJyb3IoZXJyKSB7XG4gICAgZXJyLmVycm9yID0gZXJyLmVycm9yIHx8IHt9O1xuICAgIGxldCBzdGF0dXMgPSBlcnIuc3RhdHVzQ29kZSB8fCBlcnIuc3RhdHVzO1xuICAgIHN3aXRjaCAoc3RhdHVzKSB7XG4gICAgY2FzZSA0MDA6XG4gICAgICByZXR1cm4gbmV3IFZhbGlkYXRpb25FcnJvcihlcnIuZXJyb3IubWVzc2FnZSB8fCBlcnIubWVzc2FnZSwgZXJyLmVycm9yLmRldGFpbHMgfHwgZXJyLmRldGFpbHMpO1xuICAgIGNhc2UgNDAxOlxuICAgICAgcmV0dXJuIG5ldyBVbmF1dGhvcml6ZWRFcnJvcihlcnIuZXJyb3IubWVzc2FnZSB8fCBlcnIubWVzc2FnZSk7XG4gICAgY2FzZSA0MDM6XG4gICAgICByZXR1cm4gbmV3IEZvcmJpZGRlbkVycm9yKGVyci5lcnJvci5tZXNzYWdlIHx8IGVyci5tZXNzYWdlKTtcbiAgICBjYXNlIDQwNDpcbiAgICAgIHJldHVybiBuZXcgTm90Rm91bmRFcnJvcihlcnIuZXJyb3IubWVzc2FnZSB8fCBlcnIubWVzc2FnZSk7XG4gICAgY2FzZSA0Mjk6XG4gICAgICByZXR1cm4gbmV3IFRvb01hbnlSZXF1ZXN0c0Vycm9yKGVyci5lcnJvci5tZXNzYWdlIHx8IGVyci5tZXNzYWdlLCBlcnIuZXJyb3IubWV0YWRhdGEgfHwgZXJyLm1ldGFkYXRhKTtcbiAgICBjYXNlIDUwMDpcbiAgICAgIHJldHVybiBuZXcgSW50ZXJuYWxFcnJvcihlcnIuZXJyb3IubWVzc2FnZSB8fCBlcnIubWVzc2FnZSk7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBuZXcgQXBpRXJyb3IoQXBpRXJyb3IsIGVyci5lcnJvci5tZXNzYWdlIHx8IGVyci5tZXNzYWdlLCBzdGF0dXMpO1xuICAgIH1cbiAgfVxuXG59XG5cbi8qKlxuICogSFRUUCBjbGllbnQgc2VydmljZSBtb2NrIGZvciB0ZXN0c1xuICovXG5leHBvcnQgY2xhc3MgSHR0cENsaWVudE1vY2sgZXh0ZW5kcyBIdHRwQ2xpZW50IHtcblxuICAvKipcbiAgICogQ29uc3RydWN0cyBIVFRQIGNsaWVudCBtb2NrXG4gICAqIEBwYXJhbSB7RnVuY3Rpb24ob3B0aW9uczpPYmplY3QpOlByb21pc2V9IHJlcXVlc3RGbiBtb2NrZWQgcmVxdWVzdCBmdW5jdGlvblxuICAgKiBAcGFyYW0ge051bWJlcn0gdGltZW91dCByZXF1ZXN0IHRpbWVvdXQgaW4gc2Vjb25kc1xuICAgKiBAcGFyYW0ge1JldHJ5T3B0aW9uc30gcmV0cnlPcHRzIHJldHJ5IG9wdGlvbnNcbiAgICovXG4gIGNvbnN0cnVjdG9yKHJlcXVlc3RGbiwgdGltZW91dCwgcmV0cnlPcHRzKSB7XG4gICAgc3VwZXIodGltZW91dCwgcmV0cnlPcHRzKTtcbiAgICB0aGlzLl9yZXF1ZXN0Rm4gPSByZXF1ZXN0Rm47XG4gIH1cblxuICBfbWFrZVJlcXVlc3QoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3JlcXVlc3RGbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9XG5cbn1cbiJdfQ==