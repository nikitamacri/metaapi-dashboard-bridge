'use strict';

var _should = require('should');

var _should2 = _interopRequireDefault(_should);

var _sinon = require('sinon');

var _sinon2 = _interopRequireDefault(_sinon);

var _httpClient = require('./httpClient');

var _httpClient2 = _interopRequireDefault(_httpClient);

var _metaStats = require('./metaStats.client');

var _metaStats2 = _interopRequireDefault(_metaStats);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @test {MetaStatsClient#getMetrics}
 */
describe('MetaStatsClient#getMetrics', () => {

  const expected = { trades: 10, equity: 10102.5, balance: 10105, profit: 104, deposits: 10001 };
  const token = 'token.payload.sign';
  const accountId = '1234567';
  const httpClient = new _httpClient2.default();
  let metaStatsClient;
  let sandbox;

  before(() => {
    metaStatsClient = new _metaStats2.default(httpClient, token);
    sandbox = _sinon2.default.createSandbox();
    sandbox.stub(httpClient, 'request').resolves({ metrics: expected });
  });

  beforeEach(() => {
    metaStatsClient = new _metaStats2.default(httpClient, token);
  });

  afterEach(() => {
    sandbox.resetHistory();
  });

  after(() => {
    sandbox.restore();
  });

  it('should retrieve account metrics from API', async () => {
    const metrics = await metaStatsClient.getMetrics(accountId);
    metrics.should.be.eql(expected);
    _sinon2.default.assert.calledOnceWithExactly(httpClient.request, {
      url: `https://metastats-api-v1.agiliumtrade.agiliumtrade.ai/users/current/accounts/${accountId}/metrics`,
      method: 'GET',
      headers: { 'auth-token': token },
      json: true,
      qs: { includeOpenPositions: false }
    });
  });

  it('should retrieve account metrics with included open positions from API', async () => {
    expected.inclusive = false;
    const metrics = await metaStatsClient.getMetrics(accountId, true);
    metrics.should.be.eql(expected);
    _sinon2.default.assert.calledOnceWithExactly(httpClient.request, {
      url: `https://metastats-api-v1.agiliumtrade.agiliumtrade.ai/users/current/accounts/${accountId}/metrics`,
      method: 'GET',
      headers: { 'auth-token': token },
      json: true,
      qs: { includeOpenPositions: true }
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2xpYi9jbGllbnRzL21ldGFTdGF0cy5jbGllbnQuc3BlYy5lczYiXSwibmFtZXMiOlsiZGVzY3JpYmUiLCJleHBlY3RlZCIsInRyYWRlcyIsImVxdWl0eSIsImJhbGFuY2UiLCJwcm9maXQiLCJkZXBvc2l0cyIsInRva2VuIiwiYWNjb3VudElkIiwiaHR0cENsaWVudCIsIkh0dHBDbGllbnQiLCJtZXRhU3RhdHNDbGllbnQiLCJzYW5kYm94IiwiYmVmb3JlIiwiTWV0YVN0YXRzQ2xpZW50Iiwic2lub24iLCJjcmVhdGVTYW5kYm94Iiwic3R1YiIsInJlc29sdmVzIiwibWV0cmljcyIsImJlZm9yZUVhY2giLCJhZnRlckVhY2giLCJyZXNldEhpc3RvcnkiLCJhZnRlciIsInJlc3RvcmUiLCJpdCIsImdldE1ldHJpY3MiLCJzaG91bGQiLCJiZSIsImVxbCIsImFzc2VydCIsImNhbGxlZE9uY2VXaXRoRXhhY3RseSIsInJlcXVlc3QiLCJ1cmwiLCJtZXRob2QiLCJoZWFkZXJzIiwianNvbiIsInFzIiwiaW5jbHVkZU9wZW5Qb3NpdGlvbnMiLCJpbmNsdXNpdmUiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7Ozs7QUFFQTs7O0FBR0FBLFNBQVMsNEJBQVQsRUFBdUMsTUFBTTs7QUFFM0MsUUFBTUMsV0FBVyxFQUFDQyxRQUFRLEVBQVQsRUFBYUMsUUFBUSxPQUFyQixFQUE4QkMsU0FBUyxLQUF2QyxFQUE4Q0MsUUFBUSxHQUF0RCxFQUEyREMsVUFBVSxLQUFyRSxFQUFqQjtBQUNBLFFBQU1DLFFBQVEsb0JBQWQ7QUFDQSxRQUFNQyxZQUFZLFNBQWxCO0FBQ0EsUUFBTUMsYUFBYSxJQUFJQyxvQkFBSixFQUFuQjtBQUNBLE1BQUlDLGVBQUo7QUFDQSxNQUFJQyxPQUFKOztBQUVBQyxTQUFPLE1BQU07QUFDWEYsc0JBQWtCLElBQUlHLG1CQUFKLENBQW9CTCxVQUFwQixFQUFnQ0YsS0FBaEMsQ0FBbEI7QUFDQUssY0FBVUcsZ0JBQU1DLGFBQU4sRUFBVjtBQUNBSixZQUFRSyxJQUFSLENBQWFSLFVBQWIsRUFBeUIsU0FBekIsRUFBb0NTLFFBQXBDLENBQTZDLEVBQUNDLFNBQVNsQixRQUFWLEVBQTdDO0FBQ0QsR0FKRDs7QUFNQW1CLGFBQVcsTUFBTTtBQUNmVCxzQkFBa0IsSUFBSUcsbUJBQUosQ0FBb0JMLFVBQXBCLEVBQWdDRixLQUFoQyxDQUFsQjtBQUNELEdBRkQ7O0FBSUFjLFlBQVUsTUFBTTtBQUNkVCxZQUFRVSxZQUFSO0FBQ0QsR0FGRDs7QUFJQUMsUUFBTSxNQUFNO0FBQ1ZYLFlBQVFZLE9BQVI7QUFDRCxHQUZEOztBQUlBQyxLQUFHLDBDQUFILEVBQStDLFlBQVk7QUFDekQsVUFBTU4sVUFBVSxNQUFNUixnQkFBZ0JlLFVBQWhCLENBQTJCbEIsU0FBM0IsQ0FBdEI7QUFDQVcsWUFBUVEsTUFBUixDQUFlQyxFQUFmLENBQWtCQyxHQUFsQixDQUFzQjVCLFFBQXRCO0FBQ0FjLG9CQUFNZSxNQUFOLENBQWFDLHFCQUFiLENBQW1DdEIsV0FBV3VCLE9BQTlDLEVBQXVEO0FBQ3JEQyxXQUFNLGdGQUErRXpCLFNBQVUsVUFEMUM7QUFFckQwQixjQUFRLEtBRjZDO0FBR3JEQyxlQUFTLEVBQUMsY0FBYzVCLEtBQWYsRUFINEM7QUFJckQ2QixZQUFNLElBSitDO0FBS3JEQyxVQUFJLEVBQUNDLHNCQUFzQixLQUF2QjtBQUxpRCxLQUF2RDtBQU9ELEdBVkQ7O0FBWUFiLEtBQUcsdUVBQUgsRUFBNEUsWUFBWTtBQUN0RnhCLGFBQVNzQyxTQUFULEdBQXFCLEtBQXJCO0FBQ0EsVUFBTXBCLFVBQVUsTUFBTVIsZ0JBQWdCZSxVQUFoQixDQUEyQmxCLFNBQTNCLEVBQXNDLElBQXRDLENBQXRCO0FBQ0FXLFlBQVFRLE1BQVIsQ0FBZUMsRUFBZixDQUFrQkMsR0FBbEIsQ0FBc0I1QixRQUF0QjtBQUNBYyxvQkFBTWUsTUFBTixDQUFhQyxxQkFBYixDQUFtQ3RCLFdBQVd1QixPQUE5QyxFQUF1RDtBQUNyREMsV0FBTSxnRkFBK0V6QixTQUFVLFVBRDFDO0FBRXJEMEIsY0FBUSxLQUY2QztBQUdyREMsZUFBUyxFQUFDLGNBQWM1QixLQUFmLEVBSDRDO0FBSXJENkIsWUFBTSxJQUorQztBQUtyREMsVUFBSSxFQUFDQyxzQkFBc0IsSUFBdkI7QUFMaUQsS0FBdkQ7QUFPRCxHQVhEO0FBYUQsQ0FwREQiLCJmaWxlIjoibWV0YVN0YXRzLmNsaWVudC5zcGVjLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgc2hvdWxkIGZyb20gJ3Nob3VsZCc7XG5pbXBvcnQgc2lub24gIGZyb20gJ3Npbm9uJztcbmltcG9ydCBIdHRwQ2xpZW50IGZyb20gJy4vaHR0cENsaWVudCc7XG5pbXBvcnQgTWV0YVN0YXRzQ2xpZW50IGZyb20gJy4vbWV0YVN0YXRzLmNsaWVudCc7XG5cbi8qKlxuICogQHRlc3Qge01ldGFTdGF0c0NsaWVudCNnZXRNZXRyaWNzfVxuICovXG5kZXNjcmliZSgnTWV0YVN0YXRzQ2xpZW50I2dldE1ldHJpY3MnLCAoKSA9PiB7XG5cbiAgY29uc3QgZXhwZWN0ZWQgPSB7dHJhZGVzOiAxMCwgZXF1aXR5OiAxMDEwMi41LCBiYWxhbmNlOiAxMDEwNSwgcHJvZml0OiAxMDQsIGRlcG9zaXRzOiAxMDAwMX07XG4gIGNvbnN0IHRva2VuID0gJ3Rva2VuLnBheWxvYWQuc2lnbic7XG4gIGNvbnN0IGFjY291bnRJZCA9ICcxMjM0NTY3JztcbiAgY29uc3QgaHR0cENsaWVudCA9IG5ldyBIdHRwQ2xpZW50KCk7XG4gIGxldCBtZXRhU3RhdHNDbGllbnQ7XG4gIGxldCBzYW5kYm94O1xuXG4gIGJlZm9yZSgoKSA9PiB7XG4gICAgbWV0YVN0YXRzQ2xpZW50ID0gbmV3IE1ldGFTdGF0c0NsaWVudChodHRwQ2xpZW50LCB0b2tlbik7XG4gICAgc2FuZGJveCA9IHNpbm9uLmNyZWF0ZVNhbmRib3goKTtcbiAgICBzYW5kYm94LnN0dWIoaHR0cENsaWVudCwgJ3JlcXVlc3QnKS5yZXNvbHZlcyh7bWV0cmljczogZXhwZWN0ZWR9KTtcbiAgfSk7XG5cbiAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgbWV0YVN0YXRzQ2xpZW50ID0gbmV3IE1ldGFTdGF0c0NsaWVudChodHRwQ2xpZW50LCB0b2tlbik7XG4gIH0pO1xuXG4gIGFmdGVyRWFjaCgoKSA9PiB7XG4gICAgc2FuZGJveC5yZXNldEhpc3RvcnkoKTtcbiAgfSk7XG5cbiAgYWZ0ZXIoKCkgPT4ge1xuICAgIHNhbmRib3gucmVzdG9yZSgpO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIHJldHJpZXZlIGFjY291bnQgbWV0cmljcyBmcm9tIEFQSScsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCBtZXRyaWNzID0gYXdhaXQgbWV0YVN0YXRzQ2xpZW50LmdldE1ldHJpY3MoYWNjb3VudElkKTtcbiAgICBtZXRyaWNzLnNob3VsZC5iZS5lcWwoZXhwZWN0ZWQpO1xuICAgIHNpbm9uLmFzc2VydC5jYWxsZWRPbmNlV2l0aEV4YWN0bHkoaHR0cENsaWVudC5yZXF1ZXN0LCB7XG4gICAgICB1cmw6IGBodHRwczovL21ldGFzdGF0cy1hcGktdjEuYWdpbGl1bXRyYWRlLmFnaWxpdW10cmFkZS5haS91c2Vycy9jdXJyZW50L2FjY291bnRzLyR7YWNjb3VudElkfS9tZXRyaWNzYCxcbiAgICAgIG1ldGhvZDogJ0dFVCcsXG4gICAgICBoZWFkZXJzOiB7J2F1dGgtdG9rZW4nOiB0b2tlbn0sXG4gICAgICBqc29uOiB0cnVlLFxuICAgICAgcXM6IHtpbmNsdWRlT3BlblBvc2l0aW9uczogZmFsc2V9XG4gICAgfSk7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgcmV0cmlldmUgYWNjb3VudCBtZXRyaWNzIHdpdGggaW5jbHVkZWQgb3BlbiBwb3NpdGlvbnMgZnJvbSBBUEknLCBhc3luYyAoKSA9PiB7XG4gICAgZXhwZWN0ZWQuaW5jbHVzaXZlID0gZmFsc2U7XG4gICAgY29uc3QgbWV0cmljcyA9IGF3YWl0IG1ldGFTdGF0c0NsaWVudC5nZXRNZXRyaWNzKGFjY291bnRJZCwgdHJ1ZSk7XG4gICAgbWV0cmljcy5zaG91bGQuYmUuZXFsKGV4cGVjdGVkKTtcbiAgICBzaW5vbi5hc3NlcnQuY2FsbGVkT25jZVdpdGhFeGFjdGx5KGh0dHBDbGllbnQucmVxdWVzdCwge1xuICAgICAgdXJsOiBgaHR0cHM6Ly9tZXRhc3RhdHMtYXBpLXYxLmFnaWxpdW10cmFkZS5hZ2lsaXVtdHJhZGUuYWkvdXNlcnMvY3VycmVudC9hY2NvdW50cy8ke2FjY291bnRJZH0vbWV0cmljc2AsXG4gICAgICBtZXRob2Q6ICdHRVQnLFxuICAgICAgaGVhZGVyczogeydhdXRoLXRva2VuJzogdG9rZW59LFxuICAgICAganNvbjogdHJ1ZSxcbiAgICAgIHFzOiB7aW5jbHVkZU9wZW5Qb3NpdGlvbnM6IHRydWV9XG4gICAgfSk7XG4gIH0pO1xuXG59KTtcbiJdfQ==