'use strict';

/**
 * metaapi.cloud MetaStats MetaTrader API client
 */

Object.defineProperty(exports, "__esModule", {
  value: true
});
class MetaStatsClient {

  /**
   * Constructs MetaStats API client instance
   * @param {HttpClient} httpClient HTTP client
   * @param {String} token authorization token
   * @param {String} [domain] domain to connect to, default is agiliumtrade.agiliumtrade.ai
   */
  constructor(httpClient, token, domain = 'agiliumtrade.agiliumtrade.ai') {
    this._httpClient = httpClient;
    this._host = `https://metastats-api-v1.${domain}`;
    this._token = token;
  }

  /**
   * @typedef {Object} CurrencySummaryHistoryDayMetrics profit from trading a currency pair in one trading day
   * @property {String} date date of trading day, in broker timezone, YYYY-MM-DD format
   * @property {Number} totalProfit total profit at the end of the day
   * @property {Number} [totalPips] total pips of trading day
   * @property {Number} [shortProfit] total profit of short trades per day
   * @property {Number} [longProfit] total profit of long trades per day
   * @property {Number} [shortPips] total pips of short trades per day
   * @property {Number} [longPips] total pips of long trades per day
   */

  /**
   * @typedef {Object} CurrencySummaryTotalMetrics provides general data of this currency trading
   * @property {Number} profit cumulative profit of this currency trading
   * @property {Number} trades the number of all trades with this currency
   * @property {Number} [pips] cumulative pips of this currency trading
   * @property {Number} [wonTrades] the number of winning trades with this currency
   * @property {Number} [lostTrades] the number of losing trades with this currency
   * @property {Number} [wonTradesPercent] percentage of winning trades with this currency
   * @property {Number} [lostTradesPercent] percentage of losing trades with this currency
   */

  /**
   * @typedef {Object} CurrencySummaryTradeMetrics provides profit and number of trades in specific trade and currency
   * @property {Number} profit cumulative profit of this currency trading
   * @property {Number} trades the number of all trades with this currency
   * @property {Number} [pips] cumulative pips of this currency trading
   */

  /**
   * @typedef {Object} CurrencySummaryMetrics provides statistics on winning and losing trades indicating
   * the amount in the context of long and short positions.
   * Statistics is given for all currency pairs, for which positions were opened
   * @property {String} currency trading currency pair
   * @property {Array<CurrencySummaryHistoryDayMetrics>} history history of trading a currency pair per trading days
   * @property {CurrencySummaryTotalMetrics} total general data (such as profit, number of trades)
   * about trading a specific currency pair
   * @property {CurrencySummaryTradeMetrics} [short] profit and number of trades of short trades in a specific currency
   * @property {CurrencySummaryTradeMetrics} [long] profit and number of trades of long trades in a specific currency
   */

  /**
   * @typedef {Object} PeriodMetrics provides statistics for one trade period compared to
   * the results for the previous period
   * @property {Number} [profit] cumulative profit of this period
   * @property {Number} [pips] cumulative pips of this period
   * @property {Number} [lots] cumulative lots of this period
   * @property {Number} [gain] gain of this period
   * @property {Number} [trades] the number of trades of this period
   * @property {Number} [wonTradesPercent] percentage of winning trades of this period
   * @property {Number} [profitDifference] difference in profit with the previous period
   * @property {Number} [pipsDifference] difference in pips with the previous period
   * @property {Number} [lotsDifference] difference in lots with the previous period
   * @property {Number} [gainDifference] difference in gain with the previous period
   * @property {Number} [tradesDifference] difference in the number of trades with the previous period
   * @property {Number} [wonTradesPercentDifference] difference in percentage of winning trades with the previous period
   */

  /**
   * @typedef {Object} Periods provides statistics for today, this week, this month, this year
   * @property {PeriodMetrics} [today] trade information for today
   * @property {PeriodMetrics} [thisWeek] trade information for this week
   * @property {PeriodMetrics} [thisMonth] trade information for this month
   * @property {PeriodMetrics} [thisYear] trade information for this year
   */

  /**
   * @typedef {Object} DailyGrowthMetrics provides each profit received from the volume of trade and changes in
   * balance, total accumulated income and existing account drawdown by day
   * @property {String} date date of trading day in broker timezone, YYYY-MM-DD format
   * @property {Number} [profit] cumulative profit per day
   * @property {Number} [pips] cumulative pips per day
   * @property {Number} [lots] cumulative lots per day
   * @property {Number} [gains] cumulative gains per day
   * @property {Number} totalProfit total profit in this day end
   * @property {Number} totalGains total gains in this day end
   * @property {Number} balance balance in this day end
   * @property {Number} [drawdownPercentage] percentage of balance drawdown in this day end
   * @property {Number} [drawdownProfit] maximum registered balance drawdown in basic currency during this day
   */

  /**
   * @typedef {Object} MonthlyAnalyticCurrencyMetrics currency pair trading information for monthly analysis
   * @property {String} currency currency pair
   * @property {Number} [averageHoldingTimeLongsInMilliseconds] average holding time of long trades
   * @property {Number} [averageHoldingTimeShortsInMilliseconds] average holding time of short trades
   * @property {Number} rewardToRiskRatio the difference between reward and risk, where the lesser is always one.
   * So 0 means reward:risk=1:1, 2 means 3:1, -0.5 means 1:1.5
   * @property {Number} popularityPercent the percentage of popularity of this currency this month
   */

  /**
   * @typedef {Object} MonthlyAnalyticsMetrics monthly analysis of trading on this account
   * @property {String} date date of trading month in broker timezone, YYYY-MM format
   * @property {Number} [profit] cumulative profit per month
   * @property {Number} [pips] cumulative pips per month
   * @property {Number} [lots] cumulative lots per month
   * @property {Number} [gains] cumulative gains per month
   * @property {Number} [trades] the number of trades of this month
   * @property {Array<MonthlyAnalyticCurrencyMetrics>} [currencies] list of currency pair trading
   * informations for monthly analysis
   */

  /**
   * @typedef {Object} TradeByTimeMetrics opening/closing deals by days of the week or by by hours of the day
   * @property {String} date date of trading month in broker timezone, YYYY-MM format
   * @property {Number} profit the total profit of the trades at this time
   * @property {Number} [shortProfit] the total profit of short trades at this time
   * @property {Number} [longProfit] the total profit of long trades at this time
   * @property {Number} [wonProfit] the total profit of winning trades at this time
   * @property {Number} [lostProfit] the total profit of losing trades at this time
   * @property {Number} [pips] the total pips of the trades at this time
   * @property {Number} [shortPips] the total pips of short trades at this time
   * @property {Number} [longPips] the total pips of long trades at this time
   * @property {Number} [wonPips] the total pips of winning trades at this time
   * @property {Number} [lostPips] the total pips of losing trades at this time
   * @property {Number} lots cumulative lots of trades at this time
   * @property {Number} gains cumulative gains of trades at this time
   * @property {Number} [shortGains] cumulative gains of short trades at this time
   * @property {Number} [longGains] cumulative gains of long trades at this time
   * @property {Number} [wonGains] cumulative gains of winning trades at this time
   * @property {Number} [lostGains] cumulative gains of losing trades at this time
   * @property {Number} trades the number of all trades at this time
   * @property {Number} [shortTrades] the number of short trades at this time
   * @property {Number} [longTrades] the number of long trades at this time
   * @property {Number} [wonTrades] the number of winning trades at this time
   * @property {Number} [lostTrades] the number of losing trades at this time
   * @property {Number} [shortTradesPercent] percentage of short trades at this time
   * @property {Number} [longTradesPercent] percentage of long trades at this time
   * @property {Number} [wonTradesPercent] percentage of winning trades at this time
   * @property {Number} [lostTradesPercent] percentage of losing trades at this time
   * @property {Number} [hour] day hour (only for by hour case)', within 0-23
   * @property {Number} [day] weekday number (only for by day case), within 0-6
   */

  /**
   * @typedef {Object} RiskOfRuinMetrics risk of ruin of balance metrics
   * @property {Number} lossSize loss size of balance
   * @property {Number} probabilityOfLoss probability of loss shows the risk of losing a particular part of the balance
   * @property {Number} consecutiveLosingTrades the number of losing trades that must be entered sequentially
   * in order for this part of the balance to be lost
   */

  /**
   * @typedef {Object} OneTradeDurationMetrics metrics of one trade duration
   * @property {Array<Number>} gains list of gains for this duration
   * @property {Array<Number>} profits list of profits for this duration
   * @property {Array<Number>} lots list of lots for this duration
   * @property {Array<Number>} [pips] list of pips for this duration
   * @property {Number} durationInMinutes duration of trades in minutes
   */

  /**
   * @typedef {Object} TradeDurationMetrics metrics for each duration of trades
   * @property {Array<OneTradeDurationMetrics>} [won] metrics of winning trades
   * @property {Array<OneTradeDurationMetrics>} [lost] metrics of losing trades
   */

  /**
   * @typedef {Object} TradeDurationDiagramColumnCollectionMetrics collection of metrics of trades
   * in the current column for the diagram
   * @property {Array<Number>} gains list of gains
   * @property {Array<Number>} profits list of profits
   * @property {Array<Number>} lots list of lots
   * @property {Array<Number>} [pips] list of pips
   */

  /**
   * @typedef {Object} TradeDurationDiagramColumnMetrics information column about
   * the duration of trades for the diagram
   * @property {Number} durations the number of durations in this column
   * @property {Number} trades the number of trades in this column
   * @property {String} name name of this column, one of 'seconds', 'minutes', 'hours', 'days', 'weeks', 'months'
   * @property {Number} minDurationInSeconds minimum trade duration in this column in seconds
   * @property {Number} [maxDurationInSeconds] maximum trade duration in this column in seconds
   * @property {TradeDurationDiagramColumnCollectionMetrics} [won] collection of metrics of winning
   * trades in this column
   * @property {TradeDurationDiagramColumnCollectionMetrics} [lost] collection of metrics of losing
   * trades in this column
   */

  /**
   * @typedef {Object} Metrics trading statistics metrics
   * @property {Boolean} [inclusive] indicates whether open positions are included in the metrics,
   * "false" means that there are no open positions. Only for a request with includeOpenPositions=true
   * @property {Number} balance money on the account, not accounting for the results of currently open positions
   * @property {String} [highestBalanceDate] date of maximum balance that have ever been on the account,
   * in broker timezone, YYYY-MM-DD HH:mm:ss.SSS format
   * @property {Number} [highestBalance] maximum balance that have ever been on the account
   * @property {Number} equity the result (current amount) of all positions, including opened
   * @property {Number} trades total number of closed positions on the account
   * @property {Number} [withdrawals] total amount withdrawn from the deposit
   * @property {Number} [averageTradeLengthInMilliseconds] average trade length
   * (time from open to close) in milliseconds
   * @property {Number} [bestTrade] the best profit from one trade that has ever been on the account
   * @property {Number} [worstTrade] the worst profit from one trade that has ever been on the account
   * @property {Number} [bestTradePips] the best pips from one trade that has ever been on the account
   * @property {Number} [worstTradePips] the worst pips from one trade that has ever been on the account
   * @property {String} [bestTradeDate] date of the best profit from one trade that have ever been on the account,
   * in broker timezone, YYYY-MM-DD HH:mm:ss.SSS format
   * @property {String} [bestTradePipsDate] date of the best pips from one trade that have ever been on the account,
   * in broker timezone, YYYY-MM-DD HH:mm:ss.SSS format
   * @property {String} [worstTradeDate] date of the worst profit from one trade that have ever been on the account,
   * in broker timezone, YYYY-MM-DD HH:mm:ss.SSS format
   * @property {String} [worstTradePipsDate] date of the worst pips from one trade that have ever been on the account,
   * in broker timezone, YYYY-MM-DD HH:mm:ss.SSS format
   * @property {Number} [commissions] commissions charged by the broker for the entire period
   * @property {Number} [dailyGain] compound daily rate of return
   * @property {Number} [monthlyGain] compound monthly rate of return
   * @property {Number} [equityPercent] percentage of current equity to balance
   * @property {Number} [expectancy] the average expected profitability of one trade in basic currency
   * @property {Number} [expectancyPips] the average expected profitability of one trade in pips
   * @property {Number} [gain] time-weighted rate of return
   * @property {Number} [geometricHoldingPeriodReturn] geometric holding period return
   * @property {Number} [interest] cumulative interest and swap for the entire period
   * @property {Number} [longTrades] the number of long trades
   * @property {Number} [shortTrades] the number of short trades
   * @property {Number} [longWonTrades] the number of long winning trades
   * @property {Number} [shortWonTrades] the number of short winning trades
   * @property {Number} [longWonTradesPercent] percentage of long winning trades
   * @property {Number} [shortWonTradesPercent] percentage of short winning trades
   * @property {Number} [maxDrawdown] percentage of maximum drawdown of balance during the entire trading history
   * @property {Number} [lots] total volume of trades
   * @property {Number} [pips] cumulative price units
   * @property {Number} profit the total yield of closed positions for the entire period (total result)
   * @property {Number} deposits cumulative deposit for the entire period
   * @property {Number} [absoluteGain] simple deposit increase without regard to reinvestment
   * @property {Number} [profitFactor] the amount yielded by winning trades divided by the amount
   * of losses yielded by losing trades. Result in range 0 - Infinity means: `0` - only loss, `1` - profit equals to
   * loss, `Infinity` - only profit.
   * @property {Number} [sharpeRatio] average return earned in excess of the risk-free rate per unit of volatility.
   * It is calculated if there are at least 30 closed deals in the history
   * @property {Number} [sortinoRatio] differentiates harmful volatility from total overall volatility.
   * It is calculated if there are at least 30 closed deals in the history
   * @property {Number} [standardDeviationProfit] statistical measure of volatility shows how much
   * variation or dispersion. It is calculated if there are at least 30 closed deals in the history
   * @property {Number} [kurtosisProfit] a statistical measure that is used to describe profit distribution.
   * It is calculated if there are at least 30 closed deals in the history
   * @property {Number} [averageHoldingPeriodReturn] average holding period return.
   * It is calculated if there are at least 30 closed deals in the history
   * @property {Number} [averageWin] average win in basic currency
   * @property {Number} [averageWinPips] average win in pips
   * @property {Number} [averageLoss] average loss in basic currency
   * @property {Number} [averageLossPips] average loss in pips
   * @property {Number} [wonTradesPercent] percentage of winning trades
   * @property {Number} [lostTradesPercent] percentage of losing trades
   * @property {Number} [zScore] ability of a trading system to generate wins and losses in streaks.
   * It is calculated if there are at least 30 closed deals in the history
   * @property {Number} [probability] probability that a profit will be followed by a profit and a loss by a loss
   * @property {Number} [daysSinceTradingStarted] the number of days that have passed
   * since the opening of the first trade
   * @property {Array<CurrencySummaryMetrics>} [currencySummary] currency trading summary
   * @property {Array<DailyGrowthMetrics>} [dailyGrowth] daily gain shows the change
   * in account profitability on trading days
   * @property {Array<MonthlyAnalyticsMetrics>} [monthlyAnalytics] monthly analysis of trading on this account
   * @property {Array<TradeByTimeMetrics>} [closeTradesByWeekDay] closing deals by days of the week
   * @property {Array<TradeByTimeMetrics>} [openTradesByHour] opening deals by hour of the day
   * @property {Periods} [periods] trading stats for a few periods compared to the results for the previous period
   * @property {Array<RiskOfRuinMetrics>} [riskOfRuin] risk of ruin of balance
   * @property {TradeDurationMetrics} [tradeDuration] metrics for each duration of trades
   * @property {Array<TradeDurationDiagramColumnMetrics>} [tradeDurationDiagram] list of information columns about the
   * duration of trades for the diagram
   */

  /**
   * Returns metrics of MetaApi account
   * https://metastats-api-v1.agiliumtrade.agiliumtrade.ai/swagger/#!/default/get_users_current_accounts_accountId_metrics
   * @param {String} accountId MetaApi account id
   * @param {Boolean} [includeOpenPositions] indicates whether open positions will be included
   * in the metrics, default false
   * @return {Metrics} account metrics
   */
  async getMetrics(accountId, includeOpenPositions = false) {
    const opts = {
      url: `${this._host}/users/current/accounts/${accountId}/metrics`,
      method: 'GET',
      headers: {
        'auth-token': this._token
      },
      qs: { includeOpenPositions },
      json: true
    };
    const { metrics } = await this._httpClient.request(opts);
    return metrics;
  }

}
exports.default = MetaStatsClient;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2xpYi9jbGllbnRzL21ldGFTdGF0cy5jbGllbnQuZXM2Il0sIm5hbWVzIjpbIk1ldGFTdGF0c0NsaWVudCIsImNvbnN0cnVjdG9yIiwiaHR0cENsaWVudCIsInRva2VuIiwiZG9tYWluIiwiX2h0dHBDbGllbnQiLCJfaG9zdCIsIl90b2tlbiIsImdldE1ldHJpY3MiLCJhY2NvdW50SWQiLCJpbmNsdWRlT3BlblBvc2l0aW9ucyIsIm9wdHMiLCJ1cmwiLCJtZXRob2QiLCJoZWFkZXJzIiwicXMiLCJqc29uIiwibWV0cmljcyIsInJlcXVlc3QiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBOzs7Ozs7O0FBR2UsTUFBTUEsZUFBTixDQUFzQjs7QUFFbkM7Ozs7OztBQU1BQyxjQUFZQyxVQUFaLEVBQXdCQyxLQUF4QixFQUErQkMsU0FBUyw4QkFBeEMsRUFBd0U7QUFDdEUsU0FBS0MsV0FBTCxHQUFtQkgsVUFBbkI7QUFDQSxTQUFLSSxLQUFMLEdBQWMsNEJBQTJCRixNQUFPLEVBQWhEO0FBQ0EsU0FBS0csTUFBTCxHQUFjSixLQUFkO0FBQ0Q7O0FBRUQ7Ozs7Ozs7Ozs7O0FBV0E7Ozs7Ozs7Ozs7O0FBV0E7Ozs7Ozs7QUFPQTs7Ozs7Ozs7Ozs7O0FBWUE7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBaUJBOzs7Ozs7OztBQVFBOzs7Ozs7Ozs7Ozs7Ozs7QUFlQTs7Ozs7Ozs7OztBQVVBOzs7Ozs7Ozs7Ozs7QUFZQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFnQ0E7Ozs7Ozs7O0FBUUE7Ozs7Ozs7OztBQVNBOzs7Ozs7QUFNQTs7Ozs7Ozs7O0FBU0E7Ozs7Ozs7Ozs7Ozs7O0FBY0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBbUZBOzs7Ozs7OztBQVFBLFFBQU1LLFVBQU4sQ0FBaUJDLFNBQWpCLEVBQTRCQyx1QkFBdUIsS0FBbkQsRUFBMEQ7QUFDeEQsVUFBTUMsT0FBTztBQUNYQyxXQUFNLEdBQUUsS0FBS04sS0FBTSwyQkFBMEJHLFNBQVUsVUFENUM7QUFFWEksY0FBUSxLQUZHO0FBR1hDLGVBQVM7QUFDUCxzQkFBYyxLQUFLUDtBQURaLE9BSEU7QUFNWFEsVUFBSSxFQUFDTCxvQkFBRCxFQU5PO0FBT1hNLFlBQU07QUFQSyxLQUFiO0FBU0EsVUFBTSxFQUFDQyxPQUFELEtBQVksTUFBTSxLQUFLWixXQUFMLENBQWlCYSxPQUFqQixDQUF5QlAsSUFBekIsQ0FBeEI7QUFDQSxXQUFPTSxPQUFQO0FBQ0Q7O0FBMVNrQztrQkFBaEJqQixlIiwiZmlsZSI6Im1ldGFTdGF0cy5jbGllbnQuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogbWV0YWFwaS5jbG91ZCBNZXRhU3RhdHMgTWV0YVRyYWRlciBBUEkgY2xpZW50XG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE1ldGFTdGF0c0NsaWVudCB7XG5cbiAgLyoqXG4gICAqIENvbnN0cnVjdHMgTWV0YVN0YXRzIEFQSSBjbGllbnQgaW5zdGFuY2VcbiAgICogQHBhcmFtIHtIdHRwQ2xpZW50fSBodHRwQ2xpZW50IEhUVFAgY2xpZW50XG4gICAqIEBwYXJhbSB7U3RyaW5nfSB0b2tlbiBhdXRob3JpemF0aW9uIHRva2VuXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBbZG9tYWluXSBkb21haW4gdG8gY29ubmVjdCB0bywgZGVmYXVsdCBpcyBhZ2lsaXVtdHJhZGUuYWdpbGl1bXRyYWRlLmFpXG4gICAqL1xuICBjb25zdHJ1Y3RvcihodHRwQ2xpZW50LCB0b2tlbiwgZG9tYWluID0gJ2FnaWxpdW10cmFkZS5hZ2lsaXVtdHJhZGUuYWknKSB7XG4gICAgdGhpcy5faHR0cENsaWVudCA9IGh0dHBDbGllbnQ7XG4gICAgdGhpcy5faG9zdCA9IGBodHRwczovL21ldGFzdGF0cy1hcGktdjEuJHtkb21haW59YDtcbiAgICB0aGlzLl90b2tlbiA9IHRva2VuO1xuICB9XG5cbiAgLyoqXG4gICAqIEB0eXBlZGVmIHtPYmplY3R9IEN1cnJlbmN5U3VtbWFyeUhpc3RvcnlEYXlNZXRyaWNzIHByb2ZpdCBmcm9tIHRyYWRpbmcgYSBjdXJyZW5jeSBwYWlyIGluIG9uZSB0cmFkaW5nIGRheVxuICAgKiBAcHJvcGVydHkge1N0cmluZ30gZGF0ZSBkYXRlIG9mIHRyYWRpbmcgZGF5LCBpbiBicm9rZXIgdGltZXpvbmUsIFlZWVktTU0tREQgZm9ybWF0XG4gICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSB0b3RhbFByb2ZpdCB0b3RhbCBwcm9maXQgYXQgdGhlIGVuZCBvZiB0aGUgZGF5XG4gICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBbdG90YWxQaXBzXSB0b3RhbCBwaXBzIG9mIHRyYWRpbmcgZGF5XG4gICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBbc2hvcnRQcm9maXRdIHRvdGFsIHByb2ZpdCBvZiBzaG9ydCB0cmFkZXMgcGVyIGRheVxuICAgKiBAcHJvcGVydHkge051bWJlcn0gW2xvbmdQcm9maXRdIHRvdGFsIHByb2ZpdCBvZiBsb25nIHRyYWRlcyBwZXIgZGF5XG4gICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBbc2hvcnRQaXBzXSB0b3RhbCBwaXBzIG9mIHNob3J0IHRyYWRlcyBwZXIgZGF5XG4gICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBbbG9uZ1BpcHNdIHRvdGFsIHBpcHMgb2YgbG9uZyB0cmFkZXMgcGVyIGRheVxuICAgKi9cblxuICAvKipcbiAgICogQHR5cGVkZWYge09iamVjdH0gQ3VycmVuY3lTdW1tYXJ5VG90YWxNZXRyaWNzIHByb3ZpZGVzIGdlbmVyYWwgZGF0YSBvZiB0aGlzIGN1cnJlbmN5IHRyYWRpbmdcbiAgICogQHByb3BlcnR5IHtOdW1iZXJ9IHByb2ZpdCBjdW11bGF0aXZlIHByb2ZpdCBvZiB0aGlzIGN1cnJlbmN5IHRyYWRpbmdcbiAgICogQHByb3BlcnR5IHtOdW1iZXJ9IHRyYWRlcyB0aGUgbnVtYmVyIG9mIGFsbCB0cmFkZXMgd2l0aCB0aGlzIGN1cnJlbmN5XG4gICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBbcGlwc10gY3VtdWxhdGl2ZSBwaXBzIG9mIHRoaXMgY3VycmVuY3kgdHJhZGluZ1xuICAgKiBAcHJvcGVydHkge051bWJlcn0gW3dvblRyYWRlc10gdGhlIG51bWJlciBvZiB3aW5uaW5nIHRyYWRlcyB3aXRoIHRoaXMgY3VycmVuY3lcbiAgICogQHByb3BlcnR5IHtOdW1iZXJ9IFtsb3N0VHJhZGVzXSB0aGUgbnVtYmVyIG9mIGxvc2luZyB0cmFkZXMgd2l0aCB0aGlzIGN1cnJlbmN5XG4gICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBbd29uVHJhZGVzUGVyY2VudF0gcGVyY2VudGFnZSBvZiB3aW5uaW5nIHRyYWRlcyB3aXRoIHRoaXMgY3VycmVuY3lcbiAgICogQHByb3BlcnR5IHtOdW1iZXJ9IFtsb3N0VHJhZGVzUGVyY2VudF0gcGVyY2VudGFnZSBvZiBsb3NpbmcgdHJhZGVzIHdpdGggdGhpcyBjdXJyZW5jeVxuICAgKi9cblxuICAvKipcbiAgICogQHR5cGVkZWYge09iamVjdH0gQ3VycmVuY3lTdW1tYXJ5VHJhZGVNZXRyaWNzIHByb3ZpZGVzIHByb2ZpdCBhbmQgbnVtYmVyIG9mIHRyYWRlcyBpbiBzcGVjaWZpYyB0cmFkZSBhbmQgY3VycmVuY3lcbiAgICogQHByb3BlcnR5IHtOdW1iZXJ9IHByb2ZpdCBjdW11bGF0aXZlIHByb2ZpdCBvZiB0aGlzIGN1cnJlbmN5IHRyYWRpbmdcbiAgICogQHByb3BlcnR5IHtOdW1iZXJ9IHRyYWRlcyB0aGUgbnVtYmVyIG9mIGFsbCB0cmFkZXMgd2l0aCB0aGlzIGN1cnJlbmN5XG4gICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBbcGlwc10gY3VtdWxhdGl2ZSBwaXBzIG9mIHRoaXMgY3VycmVuY3kgdHJhZGluZ1xuICAgKi9cblxuICAvKipcbiAgICogQHR5cGVkZWYge09iamVjdH0gQ3VycmVuY3lTdW1tYXJ5TWV0cmljcyBwcm92aWRlcyBzdGF0aXN0aWNzIG9uIHdpbm5pbmcgYW5kIGxvc2luZyB0cmFkZXMgaW5kaWNhdGluZ1xuICAgKiB0aGUgYW1vdW50IGluIHRoZSBjb250ZXh0IG9mIGxvbmcgYW5kIHNob3J0IHBvc2l0aW9ucy5cbiAgICogU3RhdGlzdGljcyBpcyBnaXZlbiBmb3IgYWxsIGN1cnJlbmN5IHBhaXJzLCBmb3Igd2hpY2ggcG9zaXRpb25zIHdlcmUgb3BlbmVkXG4gICAqIEBwcm9wZXJ0eSB7U3RyaW5nfSBjdXJyZW5jeSB0cmFkaW5nIGN1cnJlbmN5IHBhaXJcbiAgICogQHByb3BlcnR5IHtBcnJheTxDdXJyZW5jeVN1bW1hcnlIaXN0b3J5RGF5TWV0cmljcz59IGhpc3RvcnkgaGlzdG9yeSBvZiB0cmFkaW5nIGEgY3VycmVuY3kgcGFpciBwZXIgdHJhZGluZyBkYXlzXG4gICAqIEBwcm9wZXJ0eSB7Q3VycmVuY3lTdW1tYXJ5VG90YWxNZXRyaWNzfSB0b3RhbCBnZW5lcmFsIGRhdGEgKHN1Y2ggYXMgcHJvZml0LCBudW1iZXIgb2YgdHJhZGVzKVxuICAgKiBhYm91dCB0cmFkaW5nIGEgc3BlY2lmaWMgY3VycmVuY3kgcGFpclxuICAgKiBAcHJvcGVydHkge0N1cnJlbmN5U3VtbWFyeVRyYWRlTWV0cmljc30gW3Nob3J0XSBwcm9maXQgYW5kIG51bWJlciBvZiB0cmFkZXMgb2Ygc2hvcnQgdHJhZGVzIGluIGEgc3BlY2lmaWMgY3VycmVuY3lcbiAgICogQHByb3BlcnR5IHtDdXJyZW5jeVN1bW1hcnlUcmFkZU1ldHJpY3N9IFtsb25nXSBwcm9maXQgYW5kIG51bWJlciBvZiB0cmFkZXMgb2YgbG9uZyB0cmFkZXMgaW4gYSBzcGVjaWZpYyBjdXJyZW5jeVxuICAgKi9cblxuICAvKipcbiAgICogQHR5cGVkZWYge09iamVjdH0gUGVyaW9kTWV0cmljcyBwcm92aWRlcyBzdGF0aXN0aWNzIGZvciBvbmUgdHJhZGUgcGVyaW9kIGNvbXBhcmVkIHRvXG4gICAqIHRoZSByZXN1bHRzIGZvciB0aGUgcHJldmlvdXMgcGVyaW9kXG4gICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBbcHJvZml0XSBjdW11bGF0aXZlIHByb2ZpdCBvZiB0aGlzIHBlcmlvZFxuICAgKiBAcHJvcGVydHkge051bWJlcn0gW3BpcHNdIGN1bXVsYXRpdmUgcGlwcyBvZiB0aGlzIHBlcmlvZFxuICAgKiBAcHJvcGVydHkge051bWJlcn0gW2xvdHNdIGN1bXVsYXRpdmUgbG90cyBvZiB0aGlzIHBlcmlvZFxuICAgKiBAcHJvcGVydHkge051bWJlcn0gW2dhaW5dIGdhaW4gb2YgdGhpcyBwZXJpb2RcbiAgICogQHByb3BlcnR5IHtOdW1iZXJ9IFt0cmFkZXNdIHRoZSBudW1iZXIgb2YgdHJhZGVzIG9mIHRoaXMgcGVyaW9kXG4gICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBbd29uVHJhZGVzUGVyY2VudF0gcGVyY2VudGFnZSBvZiB3aW5uaW5nIHRyYWRlcyBvZiB0aGlzIHBlcmlvZFxuICAgKiBAcHJvcGVydHkge051bWJlcn0gW3Byb2ZpdERpZmZlcmVuY2VdIGRpZmZlcmVuY2UgaW4gcHJvZml0IHdpdGggdGhlIHByZXZpb3VzIHBlcmlvZFxuICAgKiBAcHJvcGVydHkge051bWJlcn0gW3BpcHNEaWZmZXJlbmNlXSBkaWZmZXJlbmNlIGluIHBpcHMgd2l0aCB0aGUgcHJldmlvdXMgcGVyaW9kXG4gICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBbbG90c0RpZmZlcmVuY2VdIGRpZmZlcmVuY2UgaW4gbG90cyB3aXRoIHRoZSBwcmV2aW91cyBwZXJpb2RcbiAgICogQHByb3BlcnR5IHtOdW1iZXJ9IFtnYWluRGlmZmVyZW5jZV0gZGlmZmVyZW5jZSBpbiBnYWluIHdpdGggdGhlIHByZXZpb3VzIHBlcmlvZFxuICAgKiBAcHJvcGVydHkge051bWJlcn0gW3RyYWRlc0RpZmZlcmVuY2VdIGRpZmZlcmVuY2UgaW4gdGhlIG51bWJlciBvZiB0cmFkZXMgd2l0aCB0aGUgcHJldmlvdXMgcGVyaW9kXG4gICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBbd29uVHJhZGVzUGVyY2VudERpZmZlcmVuY2VdIGRpZmZlcmVuY2UgaW4gcGVyY2VudGFnZSBvZiB3aW5uaW5nIHRyYWRlcyB3aXRoIHRoZSBwcmV2aW91cyBwZXJpb2RcbiAgICovXG5cbiAgLyoqXG4gICAqIEB0eXBlZGVmIHtPYmplY3R9IFBlcmlvZHMgcHJvdmlkZXMgc3RhdGlzdGljcyBmb3IgdG9kYXksIHRoaXMgd2VlaywgdGhpcyBtb250aCwgdGhpcyB5ZWFyXG4gICAqIEBwcm9wZXJ0eSB7UGVyaW9kTWV0cmljc30gW3RvZGF5XSB0cmFkZSBpbmZvcm1hdGlvbiBmb3IgdG9kYXlcbiAgICogQHByb3BlcnR5IHtQZXJpb2RNZXRyaWNzfSBbdGhpc1dlZWtdIHRyYWRlIGluZm9ybWF0aW9uIGZvciB0aGlzIHdlZWtcbiAgICogQHByb3BlcnR5IHtQZXJpb2RNZXRyaWNzfSBbdGhpc01vbnRoXSB0cmFkZSBpbmZvcm1hdGlvbiBmb3IgdGhpcyBtb250aFxuICAgKiBAcHJvcGVydHkge1BlcmlvZE1ldHJpY3N9IFt0aGlzWWVhcl0gdHJhZGUgaW5mb3JtYXRpb24gZm9yIHRoaXMgeWVhclxuICAgKi9cblxuICAvKipcbiAgICogQHR5cGVkZWYge09iamVjdH0gRGFpbHlHcm93dGhNZXRyaWNzIHByb3ZpZGVzIGVhY2ggcHJvZml0IHJlY2VpdmVkIGZyb20gdGhlIHZvbHVtZSBvZiB0cmFkZSBhbmQgY2hhbmdlcyBpblxuICAgKiBiYWxhbmNlLCB0b3RhbCBhY2N1bXVsYXRlZCBpbmNvbWUgYW5kIGV4aXN0aW5nIGFjY291bnQgZHJhd2Rvd24gYnkgZGF5XG4gICAqIEBwcm9wZXJ0eSB7U3RyaW5nfSBkYXRlIGRhdGUgb2YgdHJhZGluZyBkYXkgaW4gYnJva2VyIHRpbWV6b25lLCBZWVlZLU1NLUREIGZvcm1hdFxuICAgKiBAcHJvcGVydHkge051bWJlcn0gW3Byb2ZpdF0gY3VtdWxhdGl2ZSBwcm9maXQgcGVyIGRheVxuICAgKiBAcHJvcGVydHkge051bWJlcn0gW3BpcHNdIGN1bXVsYXRpdmUgcGlwcyBwZXIgZGF5XG4gICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBbbG90c10gY3VtdWxhdGl2ZSBsb3RzIHBlciBkYXlcbiAgICogQHByb3BlcnR5IHtOdW1iZXJ9IFtnYWluc10gY3VtdWxhdGl2ZSBnYWlucyBwZXIgZGF5XG4gICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSB0b3RhbFByb2ZpdCB0b3RhbCBwcm9maXQgaW4gdGhpcyBkYXkgZW5kXG4gICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSB0b3RhbEdhaW5zIHRvdGFsIGdhaW5zIGluIHRoaXMgZGF5IGVuZFxuICAgKiBAcHJvcGVydHkge051bWJlcn0gYmFsYW5jZSBiYWxhbmNlIGluIHRoaXMgZGF5IGVuZFxuICAgKiBAcHJvcGVydHkge051bWJlcn0gW2RyYXdkb3duUGVyY2VudGFnZV0gcGVyY2VudGFnZSBvZiBiYWxhbmNlIGRyYXdkb3duIGluIHRoaXMgZGF5IGVuZFxuICAgKiBAcHJvcGVydHkge051bWJlcn0gW2RyYXdkb3duUHJvZml0XSBtYXhpbXVtIHJlZ2lzdGVyZWQgYmFsYW5jZSBkcmF3ZG93biBpbiBiYXNpYyBjdXJyZW5jeSBkdXJpbmcgdGhpcyBkYXlcbiAgICovXG5cbiAgLyoqXG4gICAqIEB0eXBlZGVmIHtPYmplY3R9IE1vbnRobHlBbmFseXRpY0N1cnJlbmN5TWV0cmljcyBjdXJyZW5jeSBwYWlyIHRyYWRpbmcgaW5mb3JtYXRpb24gZm9yIG1vbnRobHkgYW5hbHlzaXNcbiAgICogQHByb3BlcnR5IHtTdHJpbmd9IGN1cnJlbmN5IGN1cnJlbmN5IHBhaXJcbiAgICogQHByb3BlcnR5IHtOdW1iZXJ9IFthdmVyYWdlSG9sZGluZ1RpbWVMb25nc0luTWlsbGlzZWNvbmRzXSBhdmVyYWdlIGhvbGRpbmcgdGltZSBvZiBsb25nIHRyYWRlc1xuICAgKiBAcHJvcGVydHkge051bWJlcn0gW2F2ZXJhZ2VIb2xkaW5nVGltZVNob3J0c0luTWlsbGlzZWNvbmRzXSBhdmVyYWdlIGhvbGRpbmcgdGltZSBvZiBzaG9ydCB0cmFkZXNcbiAgICogQHByb3BlcnR5IHtOdW1iZXJ9IHJld2FyZFRvUmlza1JhdGlvIHRoZSBkaWZmZXJlbmNlIGJldHdlZW4gcmV3YXJkIGFuZCByaXNrLCB3aGVyZSB0aGUgbGVzc2VyIGlzIGFsd2F5cyBvbmUuXG4gICAqIFNvIDAgbWVhbnMgcmV3YXJkOnJpc2s9MToxLCAyIG1lYW5zIDM6MSwgLTAuNSBtZWFucyAxOjEuNVxuICAgKiBAcHJvcGVydHkge051bWJlcn0gcG9wdWxhcml0eVBlcmNlbnQgdGhlIHBlcmNlbnRhZ2Ugb2YgcG9wdWxhcml0eSBvZiB0aGlzIGN1cnJlbmN5IHRoaXMgbW9udGhcbiAgICovXG5cbiAgLyoqXG4gICAqIEB0eXBlZGVmIHtPYmplY3R9IE1vbnRobHlBbmFseXRpY3NNZXRyaWNzIG1vbnRobHkgYW5hbHlzaXMgb2YgdHJhZGluZyBvbiB0aGlzIGFjY291bnRcbiAgICogQHByb3BlcnR5IHtTdHJpbmd9IGRhdGUgZGF0ZSBvZiB0cmFkaW5nIG1vbnRoIGluIGJyb2tlciB0aW1lem9uZSwgWVlZWS1NTSBmb3JtYXRcbiAgICogQHByb3BlcnR5IHtOdW1iZXJ9IFtwcm9maXRdIGN1bXVsYXRpdmUgcHJvZml0IHBlciBtb250aFxuICAgKiBAcHJvcGVydHkge051bWJlcn0gW3BpcHNdIGN1bXVsYXRpdmUgcGlwcyBwZXIgbW9udGhcbiAgICogQHByb3BlcnR5IHtOdW1iZXJ9IFtsb3RzXSBjdW11bGF0aXZlIGxvdHMgcGVyIG1vbnRoXG4gICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBbZ2FpbnNdIGN1bXVsYXRpdmUgZ2FpbnMgcGVyIG1vbnRoXG4gICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBbdHJhZGVzXSB0aGUgbnVtYmVyIG9mIHRyYWRlcyBvZiB0aGlzIG1vbnRoXG4gICAqIEBwcm9wZXJ0eSB7QXJyYXk8TW9udGhseUFuYWx5dGljQ3VycmVuY3lNZXRyaWNzPn0gW2N1cnJlbmNpZXNdIGxpc3Qgb2YgY3VycmVuY3kgcGFpciB0cmFkaW5nXG4gICAqIGluZm9ybWF0aW9ucyBmb3IgbW9udGhseSBhbmFseXNpc1xuICAgKi9cblxuICAvKipcbiAgICogQHR5cGVkZWYge09iamVjdH0gVHJhZGVCeVRpbWVNZXRyaWNzIG9wZW5pbmcvY2xvc2luZyBkZWFscyBieSBkYXlzIG9mIHRoZSB3ZWVrIG9yIGJ5IGJ5IGhvdXJzIG9mIHRoZSBkYXlcbiAgICogQHByb3BlcnR5IHtTdHJpbmd9IGRhdGUgZGF0ZSBvZiB0cmFkaW5nIG1vbnRoIGluIGJyb2tlciB0aW1lem9uZSwgWVlZWS1NTSBmb3JtYXRcbiAgICogQHByb3BlcnR5IHtOdW1iZXJ9IHByb2ZpdCB0aGUgdG90YWwgcHJvZml0IG9mIHRoZSB0cmFkZXMgYXQgdGhpcyB0aW1lXG4gICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBbc2hvcnRQcm9maXRdIHRoZSB0b3RhbCBwcm9maXQgb2Ygc2hvcnQgdHJhZGVzIGF0IHRoaXMgdGltZVxuICAgKiBAcHJvcGVydHkge051bWJlcn0gW2xvbmdQcm9maXRdIHRoZSB0b3RhbCBwcm9maXQgb2YgbG9uZyB0cmFkZXMgYXQgdGhpcyB0aW1lXG4gICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBbd29uUHJvZml0XSB0aGUgdG90YWwgcHJvZml0IG9mIHdpbm5pbmcgdHJhZGVzIGF0IHRoaXMgdGltZVxuICAgKiBAcHJvcGVydHkge051bWJlcn0gW2xvc3RQcm9maXRdIHRoZSB0b3RhbCBwcm9maXQgb2YgbG9zaW5nIHRyYWRlcyBhdCB0aGlzIHRpbWVcbiAgICogQHByb3BlcnR5IHtOdW1iZXJ9IFtwaXBzXSB0aGUgdG90YWwgcGlwcyBvZiB0aGUgdHJhZGVzIGF0IHRoaXMgdGltZVxuICAgKiBAcHJvcGVydHkge051bWJlcn0gW3Nob3J0UGlwc10gdGhlIHRvdGFsIHBpcHMgb2Ygc2hvcnQgdHJhZGVzIGF0IHRoaXMgdGltZVxuICAgKiBAcHJvcGVydHkge051bWJlcn0gW2xvbmdQaXBzXSB0aGUgdG90YWwgcGlwcyBvZiBsb25nIHRyYWRlcyBhdCB0aGlzIHRpbWVcbiAgICogQHByb3BlcnR5IHtOdW1iZXJ9IFt3b25QaXBzXSB0aGUgdG90YWwgcGlwcyBvZiB3aW5uaW5nIHRyYWRlcyBhdCB0aGlzIHRpbWVcbiAgICogQHByb3BlcnR5IHtOdW1iZXJ9IFtsb3N0UGlwc10gdGhlIHRvdGFsIHBpcHMgb2YgbG9zaW5nIHRyYWRlcyBhdCB0aGlzIHRpbWVcbiAgICogQHByb3BlcnR5IHtOdW1iZXJ9IGxvdHMgY3VtdWxhdGl2ZSBsb3RzIG9mIHRyYWRlcyBhdCB0aGlzIHRpbWVcbiAgICogQHByb3BlcnR5IHtOdW1iZXJ9IGdhaW5zIGN1bXVsYXRpdmUgZ2FpbnMgb2YgdHJhZGVzIGF0IHRoaXMgdGltZVxuICAgKiBAcHJvcGVydHkge051bWJlcn0gW3Nob3J0R2FpbnNdIGN1bXVsYXRpdmUgZ2FpbnMgb2Ygc2hvcnQgdHJhZGVzIGF0IHRoaXMgdGltZVxuICAgKiBAcHJvcGVydHkge051bWJlcn0gW2xvbmdHYWluc10gY3VtdWxhdGl2ZSBnYWlucyBvZiBsb25nIHRyYWRlcyBhdCB0aGlzIHRpbWVcbiAgICogQHByb3BlcnR5IHtOdW1iZXJ9IFt3b25HYWluc10gY3VtdWxhdGl2ZSBnYWlucyBvZiB3aW5uaW5nIHRyYWRlcyBhdCB0aGlzIHRpbWVcbiAgICogQHByb3BlcnR5IHtOdW1iZXJ9IFtsb3N0R2FpbnNdIGN1bXVsYXRpdmUgZ2FpbnMgb2YgbG9zaW5nIHRyYWRlcyBhdCB0aGlzIHRpbWVcbiAgICogQHByb3BlcnR5IHtOdW1iZXJ9IHRyYWRlcyB0aGUgbnVtYmVyIG9mIGFsbCB0cmFkZXMgYXQgdGhpcyB0aW1lXG4gICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBbc2hvcnRUcmFkZXNdIHRoZSBudW1iZXIgb2Ygc2hvcnQgdHJhZGVzIGF0IHRoaXMgdGltZVxuICAgKiBAcHJvcGVydHkge051bWJlcn0gW2xvbmdUcmFkZXNdIHRoZSBudW1iZXIgb2YgbG9uZyB0cmFkZXMgYXQgdGhpcyB0aW1lXG4gICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBbd29uVHJhZGVzXSB0aGUgbnVtYmVyIG9mIHdpbm5pbmcgdHJhZGVzIGF0IHRoaXMgdGltZVxuICAgKiBAcHJvcGVydHkge051bWJlcn0gW2xvc3RUcmFkZXNdIHRoZSBudW1iZXIgb2YgbG9zaW5nIHRyYWRlcyBhdCB0aGlzIHRpbWVcbiAgICogQHByb3BlcnR5IHtOdW1iZXJ9IFtzaG9ydFRyYWRlc1BlcmNlbnRdIHBlcmNlbnRhZ2Ugb2Ygc2hvcnQgdHJhZGVzIGF0IHRoaXMgdGltZVxuICAgKiBAcHJvcGVydHkge051bWJlcn0gW2xvbmdUcmFkZXNQZXJjZW50XSBwZXJjZW50YWdlIG9mIGxvbmcgdHJhZGVzIGF0IHRoaXMgdGltZVxuICAgKiBAcHJvcGVydHkge051bWJlcn0gW3dvblRyYWRlc1BlcmNlbnRdIHBlcmNlbnRhZ2Ugb2Ygd2lubmluZyB0cmFkZXMgYXQgdGhpcyB0aW1lXG4gICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBbbG9zdFRyYWRlc1BlcmNlbnRdIHBlcmNlbnRhZ2Ugb2YgbG9zaW5nIHRyYWRlcyBhdCB0aGlzIHRpbWVcbiAgICogQHByb3BlcnR5IHtOdW1iZXJ9IFtob3VyXSBkYXkgaG91ciAob25seSBmb3IgYnkgaG91ciBjYXNlKScsIHdpdGhpbiAwLTIzXG4gICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBbZGF5XSB3ZWVrZGF5IG51bWJlciAob25seSBmb3IgYnkgZGF5IGNhc2UpLCB3aXRoaW4gMC02XG4gICAqL1xuXG4gIC8qKlxuICAgKiBAdHlwZWRlZiB7T2JqZWN0fSBSaXNrT2ZSdWluTWV0cmljcyByaXNrIG9mIHJ1aW4gb2YgYmFsYW5jZSBtZXRyaWNzXG4gICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBsb3NzU2l6ZSBsb3NzIHNpemUgb2YgYmFsYW5jZVxuICAgKiBAcHJvcGVydHkge051bWJlcn0gcHJvYmFiaWxpdHlPZkxvc3MgcHJvYmFiaWxpdHkgb2YgbG9zcyBzaG93cyB0aGUgcmlzayBvZiBsb3NpbmcgYSBwYXJ0aWN1bGFyIHBhcnQgb2YgdGhlIGJhbGFuY2VcbiAgICogQHByb3BlcnR5IHtOdW1iZXJ9IGNvbnNlY3V0aXZlTG9zaW5nVHJhZGVzIHRoZSBudW1iZXIgb2YgbG9zaW5nIHRyYWRlcyB0aGF0IG11c3QgYmUgZW50ZXJlZCBzZXF1ZW50aWFsbHlcbiAgICogaW4gb3JkZXIgZm9yIHRoaXMgcGFydCBvZiB0aGUgYmFsYW5jZSB0byBiZSBsb3N0XG4gICAqL1xuXG4gIC8qKlxuICAgKiBAdHlwZWRlZiB7T2JqZWN0fSBPbmVUcmFkZUR1cmF0aW9uTWV0cmljcyBtZXRyaWNzIG9mIG9uZSB0cmFkZSBkdXJhdGlvblxuICAgKiBAcHJvcGVydHkge0FycmF5PE51bWJlcj59IGdhaW5zIGxpc3Qgb2YgZ2FpbnMgZm9yIHRoaXMgZHVyYXRpb25cbiAgICogQHByb3BlcnR5IHtBcnJheTxOdW1iZXI+fSBwcm9maXRzIGxpc3Qgb2YgcHJvZml0cyBmb3IgdGhpcyBkdXJhdGlvblxuICAgKiBAcHJvcGVydHkge0FycmF5PE51bWJlcj59IGxvdHMgbGlzdCBvZiBsb3RzIGZvciB0aGlzIGR1cmF0aW9uXG4gICAqIEBwcm9wZXJ0eSB7QXJyYXk8TnVtYmVyPn0gW3BpcHNdIGxpc3Qgb2YgcGlwcyBmb3IgdGhpcyBkdXJhdGlvblxuICAgKiBAcHJvcGVydHkge051bWJlcn0gZHVyYXRpb25Jbk1pbnV0ZXMgZHVyYXRpb24gb2YgdHJhZGVzIGluIG1pbnV0ZXNcbiAgICovXG5cbiAgLyoqXG4gICAqIEB0eXBlZGVmIHtPYmplY3R9IFRyYWRlRHVyYXRpb25NZXRyaWNzIG1ldHJpY3MgZm9yIGVhY2ggZHVyYXRpb24gb2YgdHJhZGVzXG4gICAqIEBwcm9wZXJ0eSB7QXJyYXk8T25lVHJhZGVEdXJhdGlvbk1ldHJpY3M+fSBbd29uXSBtZXRyaWNzIG9mIHdpbm5pbmcgdHJhZGVzXG4gICAqIEBwcm9wZXJ0eSB7QXJyYXk8T25lVHJhZGVEdXJhdGlvbk1ldHJpY3M+fSBbbG9zdF0gbWV0cmljcyBvZiBsb3NpbmcgdHJhZGVzXG4gICAqL1xuXG4gIC8qKlxuICAgKiBAdHlwZWRlZiB7T2JqZWN0fSBUcmFkZUR1cmF0aW9uRGlhZ3JhbUNvbHVtbkNvbGxlY3Rpb25NZXRyaWNzIGNvbGxlY3Rpb24gb2YgbWV0cmljcyBvZiB0cmFkZXNcbiAgICogaW4gdGhlIGN1cnJlbnQgY29sdW1uIGZvciB0aGUgZGlhZ3JhbVxuICAgKiBAcHJvcGVydHkge0FycmF5PE51bWJlcj59IGdhaW5zIGxpc3Qgb2YgZ2FpbnNcbiAgICogQHByb3BlcnR5IHtBcnJheTxOdW1iZXI+fSBwcm9maXRzIGxpc3Qgb2YgcHJvZml0c1xuICAgKiBAcHJvcGVydHkge0FycmF5PE51bWJlcj59IGxvdHMgbGlzdCBvZiBsb3RzXG4gICAqIEBwcm9wZXJ0eSB7QXJyYXk8TnVtYmVyPn0gW3BpcHNdIGxpc3Qgb2YgcGlwc1xuICAgKi9cblxuICAvKipcbiAgICogQHR5cGVkZWYge09iamVjdH0gVHJhZGVEdXJhdGlvbkRpYWdyYW1Db2x1bW5NZXRyaWNzIGluZm9ybWF0aW9uIGNvbHVtbiBhYm91dFxuICAgKiB0aGUgZHVyYXRpb24gb2YgdHJhZGVzIGZvciB0aGUgZGlhZ3JhbVxuICAgKiBAcHJvcGVydHkge051bWJlcn0gZHVyYXRpb25zIHRoZSBudW1iZXIgb2YgZHVyYXRpb25zIGluIHRoaXMgY29sdW1uXG4gICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSB0cmFkZXMgdGhlIG51bWJlciBvZiB0cmFkZXMgaW4gdGhpcyBjb2x1bW5cbiAgICogQHByb3BlcnR5IHtTdHJpbmd9IG5hbWUgbmFtZSBvZiB0aGlzIGNvbHVtbiwgb25lIG9mICdzZWNvbmRzJywgJ21pbnV0ZXMnLCAnaG91cnMnLCAnZGF5cycsICd3ZWVrcycsICdtb250aHMnXG4gICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBtaW5EdXJhdGlvbkluU2Vjb25kcyBtaW5pbXVtIHRyYWRlIGR1cmF0aW9uIGluIHRoaXMgY29sdW1uIGluIHNlY29uZHNcbiAgICogQHByb3BlcnR5IHtOdW1iZXJ9IFttYXhEdXJhdGlvbkluU2Vjb25kc10gbWF4aW11bSB0cmFkZSBkdXJhdGlvbiBpbiB0aGlzIGNvbHVtbiBpbiBzZWNvbmRzXG4gICAqIEBwcm9wZXJ0eSB7VHJhZGVEdXJhdGlvbkRpYWdyYW1Db2x1bW5Db2xsZWN0aW9uTWV0cmljc30gW3dvbl0gY29sbGVjdGlvbiBvZiBtZXRyaWNzIG9mIHdpbm5pbmdcbiAgICogdHJhZGVzIGluIHRoaXMgY29sdW1uXG4gICAqIEBwcm9wZXJ0eSB7VHJhZGVEdXJhdGlvbkRpYWdyYW1Db2x1bW5Db2xsZWN0aW9uTWV0cmljc30gW2xvc3RdIGNvbGxlY3Rpb24gb2YgbWV0cmljcyBvZiBsb3NpbmdcbiAgICogdHJhZGVzIGluIHRoaXMgY29sdW1uXG4gICAqL1xuXG4gIC8qKlxuICAgKiBAdHlwZWRlZiB7T2JqZWN0fSBNZXRyaWNzIHRyYWRpbmcgc3RhdGlzdGljcyBtZXRyaWNzXG4gICAqIEBwcm9wZXJ0eSB7Qm9vbGVhbn0gW2luY2x1c2l2ZV0gaW5kaWNhdGVzIHdoZXRoZXIgb3BlbiBwb3NpdGlvbnMgYXJlIGluY2x1ZGVkIGluIHRoZSBtZXRyaWNzLFxuICAgKiBcImZhbHNlXCIgbWVhbnMgdGhhdCB0aGVyZSBhcmUgbm8gb3BlbiBwb3NpdGlvbnMuIE9ubHkgZm9yIGEgcmVxdWVzdCB3aXRoIGluY2x1ZGVPcGVuUG9zaXRpb25zPXRydWVcbiAgICogQHByb3BlcnR5IHtOdW1iZXJ9IGJhbGFuY2UgbW9uZXkgb24gdGhlIGFjY291bnQsIG5vdCBhY2NvdW50aW5nIGZvciB0aGUgcmVzdWx0cyBvZiBjdXJyZW50bHkgb3BlbiBwb3NpdGlvbnNcbiAgICogQHByb3BlcnR5IHtTdHJpbmd9IFtoaWdoZXN0QmFsYW5jZURhdGVdIGRhdGUgb2YgbWF4aW11bSBiYWxhbmNlIHRoYXQgaGF2ZSBldmVyIGJlZW4gb24gdGhlIGFjY291bnQsXG4gICAqIGluIGJyb2tlciB0aW1lem9uZSwgWVlZWS1NTS1ERCBISDptbTpzcy5TU1MgZm9ybWF0XG4gICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBbaGlnaGVzdEJhbGFuY2VdIG1heGltdW0gYmFsYW5jZSB0aGF0IGhhdmUgZXZlciBiZWVuIG9uIHRoZSBhY2NvdW50XG4gICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBlcXVpdHkgdGhlIHJlc3VsdCAoY3VycmVudCBhbW91bnQpIG9mIGFsbCBwb3NpdGlvbnMsIGluY2x1ZGluZyBvcGVuZWRcbiAgICogQHByb3BlcnR5IHtOdW1iZXJ9IHRyYWRlcyB0b3RhbCBudW1iZXIgb2YgY2xvc2VkIHBvc2l0aW9ucyBvbiB0aGUgYWNjb3VudFxuICAgKiBAcHJvcGVydHkge051bWJlcn0gW3dpdGhkcmF3YWxzXSB0b3RhbCBhbW91bnQgd2l0aGRyYXduIGZyb20gdGhlIGRlcG9zaXRcbiAgICogQHByb3BlcnR5IHtOdW1iZXJ9IFthdmVyYWdlVHJhZGVMZW5ndGhJbk1pbGxpc2Vjb25kc10gYXZlcmFnZSB0cmFkZSBsZW5ndGhcbiAgICogKHRpbWUgZnJvbSBvcGVuIHRvIGNsb3NlKSBpbiBtaWxsaXNlY29uZHNcbiAgICogQHByb3BlcnR5IHtOdW1iZXJ9IFtiZXN0VHJhZGVdIHRoZSBiZXN0IHByb2ZpdCBmcm9tIG9uZSB0cmFkZSB0aGF0IGhhcyBldmVyIGJlZW4gb24gdGhlIGFjY291bnRcbiAgICogQHByb3BlcnR5IHtOdW1iZXJ9IFt3b3JzdFRyYWRlXSB0aGUgd29yc3QgcHJvZml0IGZyb20gb25lIHRyYWRlIHRoYXQgaGFzIGV2ZXIgYmVlbiBvbiB0aGUgYWNjb3VudFxuICAgKiBAcHJvcGVydHkge051bWJlcn0gW2Jlc3RUcmFkZVBpcHNdIHRoZSBiZXN0IHBpcHMgZnJvbSBvbmUgdHJhZGUgdGhhdCBoYXMgZXZlciBiZWVuIG9uIHRoZSBhY2NvdW50XG4gICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBbd29yc3RUcmFkZVBpcHNdIHRoZSB3b3JzdCBwaXBzIGZyb20gb25lIHRyYWRlIHRoYXQgaGFzIGV2ZXIgYmVlbiBvbiB0aGUgYWNjb3VudFxuICAgKiBAcHJvcGVydHkge1N0cmluZ30gW2Jlc3RUcmFkZURhdGVdIGRhdGUgb2YgdGhlIGJlc3QgcHJvZml0IGZyb20gb25lIHRyYWRlIHRoYXQgaGF2ZSBldmVyIGJlZW4gb24gdGhlIGFjY291bnQsXG4gICAqIGluIGJyb2tlciB0aW1lem9uZSwgWVlZWS1NTS1ERCBISDptbTpzcy5TU1MgZm9ybWF0XG4gICAqIEBwcm9wZXJ0eSB7U3RyaW5nfSBbYmVzdFRyYWRlUGlwc0RhdGVdIGRhdGUgb2YgdGhlIGJlc3QgcGlwcyBmcm9tIG9uZSB0cmFkZSB0aGF0IGhhdmUgZXZlciBiZWVuIG9uIHRoZSBhY2NvdW50LFxuICAgKiBpbiBicm9rZXIgdGltZXpvbmUsIFlZWVktTU0tREQgSEg6bW06c3MuU1NTIGZvcm1hdFxuICAgKiBAcHJvcGVydHkge1N0cmluZ30gW3dvcnN0VHJhZGVEYXRlXSBkYXRlIG9mIHRoZSB3b3JzdCBwcm9maXQgZnJvbSBvbmUgdHJhZGUgdGhhdCBoYXZlIGV2ZXIgYmVlbiBvbiB0aGUgYWNjb3VudCxcbiAgICogaW4gYnJva2VyIHRpbWV6b25lLCBZWVlZLU1NLUREIEhIOm1tOnNzLlNTUyBmb3JtYXRcbiAgICogQHByb3BlcnR5IHtTdHJpbmd9IFt3b3JzdFRyYWRlUGlwc0RhdGVdIGRhdGUgb2YgdGhlIHdvcnN0IHBpcHMgZnJvbSBvbmUgdHJhZGUgdGhhdCBoYXZlIGV2ZXIgYmVlbiBvbiB0aGUgYWNjb3VudCxcbiAgICogaW4gYnJva2VyIHRpbWV6b25lLCBZWVlZLU1NLUREIEhIOm1tOnNzLlNTUyBmb3JtYXRcbiAgICogQHByb3BlcnR5IHtOdW1iZXJ9IFtjb21taXNzaW9uc10gY29tbWlzc2lvbnMgY2hhcmdlZCBieSB0aGUgYnJva2VyIGZvciB0aGUgZW50aXJlIHBlcmlvZFxuICAgKiBAcHJvcGVydHkge051bWJlcn0gW2RhaWx5R2Fpbl0gY29tcG91bmQgZGFpbHkgcmF0ZSBvZiByZXR1cm5cbiAgICogQHByb3BlcnR5IHtOdW1iZXJ9IFttb250aGx5R2Fpbl0gY29tcG91bmQgbW9udGhseSByYXRlIG9mIHJldHVyblxuICAgKiBAcHJvcGVydHkge051bWJlcn0gW2VxdWl0eVBlcmNlbnRdIHBlcmNlbnRhZ2Ugb2YgY3VycmVudCBlcXVpdHkgdG8gYmFsYW5jZVxuICAgKiBAcHJvcGVydHkge051bWJlcn0gW2V4cGVjdGFuY3ldIHRoZSBhdmVyYWdlIGV4cGVjdGVkIHByb2ZpdGFiaWxpdHkgb2Ygb25lIHRyYWRlIGluIGJhc2ljIGN1cnJlbmN5XG4gICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBbZXhwZWN0YW5jeVBpcHNdIHRoZSBhdmVyYWdlIGV4cGVjdGVkIHByb2ZpdGFiaWxpdHkgb2Ygb25lIHRyYWRlIGluIHBpcHNcbiAgICogQHByb3BlcnR5IHtOdW1iZXJ9IFtnYWluXSB0aW1lLXdlaWdodGVkIHJhdGUgb2YgcmV0dXJuXG4gICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBbZ2VvbWV0cmljSG9sZGluZ1BlcmlvZFJldHVybl0gZ2VvbWV0cmljIGhvbGRpbmcgcGVyaW9kIHJldHVyblxuICAgKiBAcHJvcGVydHkge051bWJlcn0gW2ludGVyZXN0XSBjdW11bGF0aXZlIGludGVyZXN0IGFuZCBzd2FwIGZvciB0aGUgZW50aXJlIHBlcmlvZFxuICAgKiBAcHJvcGVydHkge051bWJlcn0gW2xvbmdUcmFkZXNdIHRoZSBudW1iZXIgb2YgbG9uZyB0cmFkZXNcbiAgICogQHByb3BlcnR5IHtOdW1iZXJ9IFtzaG9ydFRyYWRlc10gdGhlIG51bWJlciBvZiBzaG9ydCB0cmFkZXNcbiAgICogQHByb3BlcnR5IHtOdW1iZXJ9IFtsb25nV29uVHJhZGVzXSB0aGUgbnVtYmVyIG9mIGxvbmcgd2lubmluZyB0cmFkZXNcbiAgICogQHByb3BlcnR5IHtOdW1iZXJ9IFtzaG9ydFdvblRyYWRlc10gdGhlIG51bWJlciBvZiBzaG9ydCB3aW5uaW5nIHRyYWRlc1xuICAgKiBAcHJvcGVydHkge051bWJlcn0gW2xvbmdXb25UcmFkZXNQZXJjZW50XSBwZXJjZW50YWdlIG9mIGxvbmcgd2lubmluZyB0cmFkZXNcbiAgICogQHByb3BlcnR5IHtOdW1iZXJ9IFtzaG9ydFdvblRyYWRlc1BlcmNlbnRdIHBlcmNlbnRhZ2Ugb2Ygc2hvcnQgd2lubmluZyB0cmFkZXNcbiAgICogQHByb3BlcnR5IHtOdW1iZXJ9IFttYXhEcmF3ZG93bl0gcGVyY2VudGFnZSBvZiBtYXhpbXVtIGRyYXdkb3duIG9mIGJhbGFuY2UgZHVyaW5nIHRoZSBlbnRpcmUgdHJhZGluZyBoaXN0b3J5XG4gICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBbbG90c10gdG90YWwgdm9sdW1lIG9mIHRyYWRlc1xuICAgKiBAcHJvcGVydHkge051bWJlcn0gW3BpcHNdIGN1bXVsYXRpdmUgcHJpY2UgdW5pdHNcbiAgICogQHByb3BlcnR5IHtOdW1iZXJ9IHByb2ZpdCB0aGUgdG90YWwgeWllbGQgb2YgY2xvc2VkIHBvc2l0aW9ucyBmb3IgdGhlIGVudGlyZSBwZXJpb2QgKHRvdGFsIHJlc3VsdClcbiAgICogQHByb3BlcnR5IHtOdW1iZXJ9IGRlcG9zaXRzIGN1bXVsYXRpdmUgZGVwb3NpdCBmb3IgdGhlIGVudGlyZSBwZXJpb2RcbiAgICogQHByb3BlcnR5IHtOdW1iZXJ9IFthYnNvbHV0ZUdhaW5dIHNpbXBsZSBkZXBvc2l0IGluY3JlYXNlIHdpdGhvdXQgcmVnYXJkIHRvIHJlaW52ZXN0bWVudFxuICAgKiBAcHJvcGVydHkge051bWJlcn0gW3Byb2ZpdEZhY3Rvcl0gdGhlIGFtb3VudCB5aWVsZGVkIGJ5IHdpbm5pbmcgdHJhZGVzIGRpdmlkZWQgYnkgdGhlIGFtb3VudFxuICAgKiBvZiBsb3NzZXMgeWllbGRlZCBieSBsb3NpbmcgdHJhZGVzLiBSZXN1bHQgaW4gcmFuZ2UgMCAtIEluZmluaXR5IG1lYW5zOiBgMGAgLSBvbmx5IGxvc3MsIGAxYCAtIHByb2ZpdCBlcXVhbHMgdG9cbiAgICogbG9zcywgYEluZmluaXR5YCAtIG9ubHkgcHJvZml0LlxuICAgKiBAcHJvcGVydHkge051bWJlcn0gW3NoYXJwZVJhdGlvXSBhdmVyYWdlIHJldHVybiBlYXJuZWQgaW4gZXhjZXNzIG9mIHRoZSByaXNrLWZyZWUgcmF0ZSBwZXIgdW5pdCBvZiB2b2xhdGlsaXR5LlxuICAgKiBJdCBpcyBjYWxjdWxhdGVkIGlmIHRoZXJlIGFyZSBhdCBsZWFzdCAzMCBjbG9zZWQgZGVhbHMgaW4gdGhlIGhpc3RvcnlcbiAgICogQHByb3BlcnR5IHtOdW1iZXJ9IFtzb3J0aW5vUmF0aW9dIGRpZmZlcmVudGlhdGVzIGhhcm1mdWwgdm9sYXRpbGl0eSBmcm9tIHRvdGFsIG92ZXJhbGwgdm9sYXRpbGl0eS5cbiAgICogSXQgaXMgY2FsY3VsYXRlZCBpZiB0aGVyZSBhcmUgYXQgbGVhc3QgMzAgY2xvc2VkIGRlYWxzIGluIHRoZSBoaXN0b3J5XG4gICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBbc3RhbmRhcmREZXZpYXRpb25Qcm9maXRdIHN0YXRpc3RpY2FsIG1lYXN1cmUgb2Ygdm9sYXRpbGl0eSBzaG93cyBob3cgbXVjaFxuICAgKiB2YXJpYXRpb24gb3IgZGlzcGVyc2lvbi4gSXQgaXMgY2FsY3VsYXRlZCBpZiB0aGVyZSBhcmUgYXQgbGVhc3QgMzAgY2xvc2VkIGRlYWxzIGluIHRoZSBoaXN0b3J5XG4gICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBba3VydG9zaXNQcm9maXRdIGEgc3RhdGlzdGljYWwgbWVhc3VyZSB0aGF0IGlzIHVzZWQgdG8gZGVzY3JpYmUgcHJvZml0IGRpc3RyaWJ1dGlvbi5cbiAgICogSXQgaXMgY2FsY3VsYXRlZCBpZiB0aGVyZSBhcmUgYXQgbGVhc3QgMzAgY2xvc2VkIGRlYWxzIGluIHRoZSBoaXN0b3J5XG4gICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBbYXZlcmFnZUhvbGRpbmdQZXJpb2RSZXR1cm5dIGF2ZXJhZ2UgaG9sZGluZyBwZXJpb2QgcmV0dXJuLlxuICAgKiBJdCBpcyBjYWxjdWxhdGVkIGlmIHRoZXJlIGFyZSBhdCBsZWFzdCAzMCBjbG9zZWQgZGVhbHMgaW4gdGhlIGhpc3RvcnlcbiAgICogQHByb3BlcnR5IHtOdW1iZXJ9IFthdmVyYWdlV2luXSBhdmVyYWdlIHdpbiBpbiBiYXNpYyBjdXJyZW5jeVxuICAgKiBAcHJvcGVydHkge051bWJlcn0gW2F2ZXJhZ2VXaW5QaXBzXSBhdmVyYWdlIHdpbiBpbiBwaXBzXG4gICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBbYXZlcmFnZUxvc3NdIGF2ZXJhZ2UgbG9zcyBpbiBiYXNpYyBjdXJyZW5jeVxuICAgKiBAcHJvcGVydHkge051bWJlcn0gW2F2ZXJhZ2VMb3NzUGlwc10gYXZlcmFnZSBsb3NzIGluIHBpcHNcbiAgICogQHByb3BlcnR5IHtOdW1iZXJ9IFt3b25UcmFkZXNQZXJjZW50XSBwZXJjZW50YWdlIG9mIHdpbm5pbmcgdHJhZGVzXG4gICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBbbG9zdFRyYWRlc1BlcmNlbnRdIHBlcmNlbnRhZ2Ugb2YgbG9zaW5nIHRyYWRlc1xuICAgKiBAcHJvcGVydHkge051bWJlcn0gW3pTY29yZV0gYWJpbGl0eSBvZiBhIHRyYWRpbmcgc3lzdGVtIHRvIGdlbmVyYXRlIHdpbnMgYW5kIGxvc3NlcyBpbiBzdHJlYWtzLlxuICAgKiBJdCBpcyBjYWxjdWxhdGVkIGlmIHRoZXJlIGFyZSBhdCBsZWFzdCAzMCBjbG9zZWQgZGVhbHMgaW4gdGhlIGhpc3RvcnlcbiAgICogQHByb3BlcnR5IHtOdW1iZXJ9IFtwcm9iYWJpbGl0eV0gcHJvYmFiaWxpdHkgdGhhdCBhIHByb2ZpdCB3aWxsIGJlIGZvbGxvd2VkIGJ5IGEgcHJvZml0IGFuZCBhIGxvc3MgYnkgYSBsb3NzXG4gICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBbZGF5c1NpbmNlVHJhZGluZ1N0YXJ0ZWRdIHRoZSBudW1iZXIgb2YgZGF5cyB0aGF0IGhhdmUgcGFzc2VkXG4gICAqIHNpbmNlIHRoZSBvcGVuaW5nIG9mIHRoZSBmaXJzdCB0cmFkZVxuICAgKiBAcHJvcGVydHkge0FycmF5PEN1cnJlbmN5U3VtbWFyeU1ldHJpY3M+fSBbY3VycmVuY3lTdW1tYXJ5XSBjdXJyZW5jeSB0cmFkaW5nIHN1bW1hcnlcbiAgICogQHByb3BlcnR5IHtBcnJheTxEYWlseUdyb3d0aE1ldHJpY3M+fSBbZGFpbHlHcm93dGhdIGRhaWx5IGdhaW4gc2hvd3MgdGhlIGNoYW5nZVxuICAgKiBpbiBhY2NvdW50IHByb2ZpdGFiaWxpdHkgb24gdHJhZGluZyBkYXlzXG4gICAqIEBwcm9wZXJ0eSB7QXJyYXk8TW9udGhseUFuYWx5dGljc01ldHJpY3M+fSBbbW9udGhseUFuYWx5dGljc10gbW9udGhseSBhbmFseXNpcyBvZiB0cmFkaW5nIG9uIHRoaXMgYWNjb3VudFxuICAgKiBAcHJvcGVydHkge0FycmF5PFRyYWRlQnlUaW1lTWV0cmljcz59IFtjbG9zZVRyYWRlc0J5V2Vla0RheV0gY2xvc2luZyBkZWFscyBieSBkYXlzIG9mIHRoZSB3ZWVrXG4gICAqIEBwcm9wZXJ0eSB7QXJyYXk8VHJhZGVCeVRpbWVNZXRyaWNzPn0gW29wZW5UcmFkZXNCeUhvdXJdIG9wZW5pbmcgZGVhbHMgYnkgaG91ciBvZiB0aGUgZGF5XG4gICAqIEBwcm9wZXJ0eSB7UGVyaW9kc30gW3BlcmlvZHNdIHRyYWRpbmcgc3RhdHMgZm9yIGEgZmV3IHBlcmlvZHMgY29tcGFyZWQgdG8gdGhlIHJlc3VsdHMgZm9yIHRoZSBwcmV2aW91cyBwZXJpb2RcbiAgICogQHByb3BlcnR5IHtBcnJheTxSaXNrT2ZSdWluTWV0cmljcz59IFtyaXNrT2ZSdWluXSByaXNrIG9mIHJ1aW4gb2YgYmFsYW5jZVxuICAgKiBAcHJvcGVydHkge1RyYWRlRHVyYXRpb25NZXRyaWNzfSBbdHJhZGVEdXJhdGlvbl0gbWV0cmljcyBmb3IgZWFjaCBkdXJhdGlvbiBvZiB0cmFkZXNcbiAgICogQHByb3BlcnR5IHtBcnJheTxUcmFkZUR1cmF0aW9uRGlhZ3JhbUNvbHVtbk1ldHJpY3M+fSBbdHJhZGVEdXJhdGlvbkRpYWdyYW1dIGxpc3Qgb2YgaW5mb3JtYXRpb24gY29sdW1ucyBhYm91dCB0aGVcbiAgICogZHVyYXRpb24gb2YgdHJhZGVzIGZvciB0aGUgZGlhZ3JhbVxuICAgKi9cblxuICAvKipcbiAgICogUmV0dXJucyBtZXRyaWNzIG9mIE1ldGFBcGkgYWNjb3VudFxuICAgKiBodHRwczovL21ldGFzdGF0cy1hcGktdjEuYWdpbGl1bXRyYWRlLmFnaWxpdW10cmFkZS5haS9zd2FnZ2VyLyMhL2RlZmF1bHQvZ2V0X3VzZXJzX2N1cnJlbnRfYWNjb3VudHNfYWNjb3VudElkX21ldHJpY3NcbiAgICogQHBhcmFtIHtTdHJpbmd9IGFjY291bnRJZCBNZXRhQXBpIGFjY291bnQgaWRcbiAgICogQHBhcmFtIHtCb29sZWFufSBbaW5jbHVkZU9wZW5Qb3NpdGlvbnNdIGluZGljYXRlcyB3aGV0aGVyIG9wZW4gcG9zaXRpb25zIHdpbGwgYmUgaW5jbHVkZWRcbiAgICogaW4gdGhlIG1ldHJpY3MsIGRlZmF1bHQgZmFsc2VcbiAgICogQHJldHVybiB7TWV0cmljc30gYWNjb3VudCBtZXRyaWNzXG4gICAqL1xuICBhc3luYyBnZXRNZXRyaWNzKGFjY291bnRJZCwgaW5jbHVkZU9wZW5Qb3NpdGlvbnMgPSBmYWxzZSkge1xuICAgIGNvbnN0IG9wdHMgPSB7XG4gICAgICB1cmw6IGAke3RoaXMuX2hvc3R9L3VzZXJzL2N1cnJlbnQvYWNjb3VudHMvJHthY2NvdW50SWR9L21ldHJpY3NgLFxuICAgICAgbWV0aG9kOiAnR0VUJyxcbiAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgJ2F1dGgtdG9rZW4nOiB0aGlzLl90b2tlblxuICAgICAgfSxcbiAgICAgIHFzOiB7aW5jbHVkZU9wZW5Qb3NpdGlvbnN9LFxuICAgICAganNvbjogdHJ1ZSxcbiAgICB9O1xuICAgIGNvbnN0IHttZXRyaWNzfSA9IGF3YWl0IHRoaXMuX2h0dHBDbGllbnQucmVxdWVzdChvcHRzKTtcbiAgICByZXR1cm4gbWV0cmljcztcbiAgfVxuXG59XG4iXX0=